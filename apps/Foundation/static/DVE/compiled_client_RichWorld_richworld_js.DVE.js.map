{"version":3,"file":"compiled_client_RichWorld_richworld_js.DVE.js","mappings":";;;;;;;;;;;;;AAAsD;AACtD,MAAM,sEAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDjB;AACwC;AACiB;AACgB;AACZ;AACiB;AACvB;AACqB;AAClB;AACT;AACqB;AACQ;AACL;AACZ;AACtD;AACP;AACA,iBAAiB,6DAAqB,CAAC,mGAA6B;AACpE,YAAY,+FAAkC;AAC9C,SAAS;AACT,iBAAiB,6DAAqB,CAAC,mGAA6B;AACpE,YAAY,+FAAkC;AAC9C,SAAS;AACT,KAAK;AACL;AACA,eAAe,6DAAqB,CAAC,8FAAwB;AAC7D,YAAY,sFAAkC;AAC9C,SAAS;AACT,mBAAmB,6DAAqB,CAAC,kGAA4B;AACrE,YAAY,8FAAiC;AAC7C,SAAS;AACT,KAAK;AACL;AACA,mBAAmB,6DAAqB,CAAC,2FAAqB;AAC9D,YAAY,yGAAoC;AAChD,SAAS;AACT,eAAe,6DAAqB,CAAC,uFAAiB;AACtD,YAAY,4EAAuB;AACnC,SAAS;AACT,YAAY,+EAA0B;AACtC,SAAS;AACT,gBAAgB,6DAAqB,CAAC,wFAAkB;AACxD,YAAY,6EAAwB;AACpC,SAAS;AACT,YAAY,gFAA2B;AACvC,SAAS;AACT,gBAAgB,6DAAqB,CAAC,wFAAkB;AACxD,YAAY,6EAAwB;AACpC,SAAS;AACT,YAAY,gFAA2B;AACvC,SAAS;AACT,sBAAsB,6DAAqB,CAAC,8FAAwB;AACpE,YAAY,4FAAwB;AACpC,SAAS;AACT,YAAY,+FAA2B;AACvC,SAAS;AACT,KAAK;AACL;AACA,eAAe,6DAAqB,CAAC,2FAAqB;AAC1D,YAAY,gEAAe;AAC3B,YAAY,+DAAc;AAC1B,SAAS;AACT,mBAAmB,6DAAqB,CAAC,+FAAyB;AAClE,YAAY,6EAAmB;AAC/B,SAAS;AACT,eAAe,6DAAqB,CAAC,2FAAqB;AAC1D,YAAY,sEAAe;AAC3B,SAAS;AACT,gBAAgB,6DAAqB,CAAC,4FAAsB;AAC5D,YAAY,yEAAgB;AAC5B,SAAS;AACT,gBAAgB,6DAAqB,CAAC,4FAAsB;AAC5D,YAAY,yEAAgB;AAC5B,YAAY,+EAAsB;AAClC,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACoE;AACpB;AAChD,WAAW,iBAAiB;AAC5B;AACuD;AACF;AACM;AAC3D;AACqH;AACrH;AACkD;AACgB;AACI;AAC9B;AACmB;AACJ;AACF;AAC9C;AACP;AACA;AACA,WAAW,qEAAc;AACzB,QAAQ,kDAAU;AAClB,iBAAiB,mEAAW;AAC5B,UAAU,wDAAI;AACd,cAAc,4EAAc;AAC5B,eAAe,mEAAS;AACxB,gBAAgB,oEAAU;AAC1B,eAAe,mEAAS;AACxB,qBAAqB,yEAAe;AACpC,YAAY,gEAAM;AAClB,cAAc,kEAAQ;AACtB,cAAc,2EAAgB;AAC9B,kBAAkB,+DAAY;AAC9B,UAAU,6DAAW;AACrB,kBAAkB,8EAAY;AAC9B;AACA,cAAc,+DAAU;AACxB,KAAK;AACL;AACA,mBAAmB,iEAAY;AAC/B,KAAK;AACL;AACA,mBAAmB,8DAAQ;AAC3B,KAAK;AACL;;;;;;;;;;;;;;;;;AC7C0E;AAClC;AACjC;AACP;AACA;AACA;AACA;AACA,UAAU,wDAAgB;AAC1B;AACA;AACA,mBAAmB,0FAA4B;AAC/C,SAAS;AACT;AACA,KAAK;AACL;;;;;;;;;;;;;;;;ACd8D;AACvD;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yFAAiC;AAC3D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yCAAyC,yFAAiC;AAC1E;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wBAAwB,yFAAiC;AACzD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yFAAiC;AAChE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,8CAA8C,yFAAiC;AAC/E;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,8CAA8C,yFAAiC;AAC/E;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wBAAwB,yFAAiC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,kBAAkB,wFAAgC,WAAW,GAAG,wFAAgC,WAAW;AAC3G,KAAK;AACL;;;;;;;;;;;;;;;;;;;;AC7G2C;AACwB;AACC;AACZ;AAChB;AACxC,qBAAqB,gEAAY;AACjC,2BAA2B,4EAAkB;AACtC;AACP,aAAa,gEAAwB;AACrC;AACA,2BAA2B,sFAA2B;AACtD,KAAK;AACL,aAAa,gEAAwB;AACrC;AACA;AACA;AACA;AACA;AACA,uBAAuB,oEAAkB;AACzC;AACA,KAAK;AACL,aAAa,gEAAwB;AACrC;AACA;AACA;AACA,oCAAoC,oEAAkB;AACtD,KAAK;AACL,gBAAgB,gEAAwB;AACxC;AACA;AACA,KAAK;AACL,kBAAkB,gEAAwB;AAC1C,uBAAuB,sFAA2B;AAClD;AACA;AACA,QAAQ,yFAA8B;AACtC;AACA,KAAK;AACL,eAAe,gEAAwB;AACvC,uBAAuB,sFAA2B;AAClD;AACA;AACA,oBAAoB,oEAAkB;AACtC;AACA,KAAK;AACL,eAAe,gEAAwB;AACvC;AACA;AACA,uBAAuB,sFAA2B;AAClD,sBAAsB,oEAAkB;AACxC;AACA,KAAK;AACL,oBAAoB,gEAAwB;AAC5C,QAAQ,sFAA2B;AACnC;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;ACzDkD;AAC3C;AACP;AACA;AACA,eAAe,mEAAiB;AAChC,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;ACNuE;AAC/B;AACyB;AACb;AAC7C,mBAAmB,yDAAiB;AACpC,kBAAkB,6DAAqB;AACvC,kBAAkB,6DAAqB;AACvC,eAAe,6DAAqB;AACpC,iBAAiB,6DAAqB;AACtC,wBAAwB,oEAA4B;AAC3D;AACA,mBAAmB;AACnB,CAAC;AACD,gEAAwB;AACxB,IAAI,yFAA2B;AAC/B,IAAI,0FAAoC;AACxC,IAAI,4EAA4B;AAChC,CAAC;;;;;;;;;;;;;;;;;;ACjB0C;AACwB;AACW;AACvE,iCAAiC,mFAAmB;AAC3D;AACA;AACA,qBAAqB,sFAA2B;AAChD;AACA,qBAAqB,sFAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAkB;AACjC;AACA;;;;;;;;;;;;;;;;;;;;ACjBmE;AACxB;AACmC;AACjB;AACiB;AAC9E,2BAA2B,mFAAmB;AAC9C;AACA,4BAA4B,sEAAkB;AAC9C,4BAA4B,mFAAc;AAC1C;AACA,uBAAuB,sFAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,kFAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kFAAuB;AAC9C;AACA,uBAAuB,sFAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yFAA8B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kFAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAkB;AACjC;AACA;AACwB;;;;;;;;;;;;;;;;ACvE4B;;;;;;;;;;;;;;;;ACAH;AAC1C,kCAAkC,0DAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACzBO;AACP;AACA;AACA;AACA;AACA,0CAA0C,IAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACrBwE;AACjE,yBAAyB,gFAAmB;AAC5C,6BAA6B,gFAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;UCtEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;WClCA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,IAAI;WACJ;WACA;WACA,IAAI;WACJ;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,CAAC;WACD;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA,sGAAsG;WACtG;WACA;WACA;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA,EAAE;WACF;WACA;;;;;WChEA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WCfA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;;;;;UEHA;UACA","sources":["webpack://dve-testing/./compiled/client/RichWorld/richworld.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Data/DataSyncNode.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/RichWorld/DivineStarVoxelEngineRichWorld.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/RichWorld/Init/InitWorker.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/RichWorld/Register/RichDataRegister.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/RichWorld/Tasks/RichWorldTasks.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/RichWorld/Threads/RichWorldThreadState.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/RichWorld/Threads/RichWorldThreads.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/RichWorld/Tools/RichColumnDataTool.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/RichWorld/Tools/RichDataTool.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/RichWorld/index.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Tools/Classes/RichDataToolBase.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Classes/RegisterDataManager.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Managers/DataManagers.js","webpack://dve-testing/webpack/bootstrap","webpack://dve-testing/webpack/runtime/async module","webpack://dve-testing/webpack/runtime/chunk loaded","webpack://dve-testing/webpack/runtime/define property getters","webpack://dve-testing/webpack/runtime/ensure chunk","webpack://dve-testing/webpack/runtime/get javascript chunk filename","webpack://dve-testing/webpack/runtime/global","webpack://dve-testing/webpack/runtime/hasOwnProperty shorthand","webpack://dve-testing/webpack/runtime/make namespace object","webpack://dve-testing/webpack/runtime/publicPath","webpack://dve-testing/webpack/runtime/importScripts chunk loading","webpack://dve-testing/webpack/runtime/startup chunk dependencies","webpack://dve-testing/webpack/before-startup","webpack://dve-testing/webpack/startup","webpack://dve-testing/webpack/after-startup"],"sourcesContent":["import { DVERW } from \"divine-voxel-engine/RichWorld\";\r\nawait DVERW.$INIT();\r\n","//objects\nimport { ThreadComm } from \"threadcomm\";\nimport { WorldRegister } from \"./World/WorldRegister.js\";\nimport { DataSyncIds } from \"../Common/Threads/Contracts/DataSyncIds.js\";\nimport { VoxelPaletteReader } from \"./Voxel/VoxelPalette.js\";\nimport { DimensionsRegister } from \"./World/Dimensions/DimensionsRegister.js\";\nimport { ChunkTags } from \"./World/Chunk/ChunkTags.js\";\nimport { RegionHeaderTags, RegionTags } from \"./World/Region/RegionTags.js\";\nimport { ColumnTags } from \"./World/Column/ColumnTags.js\";\nimport { VoxelTags } from \"./Voxel/VoxelTags.js\";\nimport { MappedDataRegister } from \"./Register/MappedDataRegister.js\";\nimport { RegionHeaderRegister } from \"./World/Region/RegionHeaderRegister.js\";\nimport { SubstancePaletteReader } from \"./Substance/SubstancePalette.js\";\nimport { SubstanceTags } from \"./Substance/SubstanceTags.js\";\nexport const DataSyncNode = {\n    maps: {\n        strings: ThreadComm.onDataSync(DataSyncIds.registerStringMap, (data) => {\n            MappedDataRegister.stringMaps.sync(data);\n        }),\n        objects: ThreadComm.onDataSync(DataSyncIds.registerObjectMap, (data) => {\n            MappedDataRegister.objectMaps.sync(data);\n        }),\n    },\n    palettes: {\n        voxel: ThreadComm.onDataSync(DataSyncIds.voxelPalette, ([palette, map]) => {\n            VoxelPaletteReader.setVoxelPalette(palette, map);\n        }),\n        substance: ThreadComm.onDataSync(DataSyncIds.substancePalette, ([palette, map]) => {\n            SubstancePaletteReader.setPalette(palette, map);\n        }),\n    },\n    worldData: {\n        dimension: ThreadComm.onDataSync(DataSyncIds.dimesnion, (data) => {\n            DimensionsRegister.registerDimension(data.id, data.options);\n        }),\n        chunk: ThreadComm.onDataSync(DataSyncIds.chunk, (data) => {\n            WorldRegister.chunk.add(data[0], data[1]);\n        }, (data) => {\n            WorldRegister.chunk.remove(data);\n        }),\n        column: ThreadComm.onDataSync(DataSyncIds.column, (data) => {\n            WorldRegister.column.add(data[0], data[1]);\n        }, (data) => {\n            WorldRegister.column.remove(data);\n        }),\n        region: ThreadComm.onDataSync(DataSyncIds.region, (data) => {\n            WorldRegister.region.add(data[0], data[1]);\n        }, (data) => {\n            WorldRegister.region.remove(data);\n        }),\n        regionHeader: ThreadComm.onDataSync(DataSyncIds.regionHeader, (data) => {\n            RegionHeaderRegister.add(data[0], data[1]);\n        }, (data) => {\n            RegionHeaderRegister.remove(data);\n        }),\n    },\n    tags: {\n        voxel: ThreadComm.onDataSync(DataSyncIds.voxelTags, (data) => {\n            VoxelTags.$INIT(data[0]);\n            VoxelTags.sync(new Uint16Array(data[1]));\n        }),\n        substance: ThreadComm.onDataSync(DataSyncIds.substanceTags, (data) => {\n            SubstanceTags.$INIT(data);\n        }),\n        chunk: ThreadComm.onDataSync(DataSyncIds.chunkTags, (data) => {\n            ChunkTags.$INIT(data);\n        }),\n        column: ThreadComm.onDataSync(DataSyncIds.columnTags, (data) => {\n            ColumnTags.$INIT(data);\n        }),\n        region: ThreadComm.onDataSync(DataSyncIds.regionTags, (data) => {\n            RegionTags.$INIT(data[0]);\n            RegionHeaderTags.$INIT(data[1]);\n        }),\n    },\n};\n","//objects\nimport { EngineSettings } from \"../Data/Settings/EngineSettings.js\";\nimport { Util } from \"../Global/Util.helper.js\";\n//import { RichWorldTasks } from \"./Tasks/Tasks.js\";\n//data\nimport { DataSyncNode } from \"../Data/DataSyncNode.js\";\nimport { DataManager } from \"../Data/DataManager.js\";\nimport { WorldBounds } from \"../Data/World/WorldBounds.js\";\n//threads\nimport { WorldComm, ParentComm, NexusComm, ConstructorComm, FXComm, DataComm, } from \"./Threads/RichWorldThreads.js\";\n//functions\nimport { InitWorker } from \"./Init/InitWorker.js\";\nimport { RichDataRegister } from \"./Register/RichDataRegister.js\";\nimport { VoxelManager } from \"../World/Data/Managers/DataManagers.js\";\nimport { ThreadComm } from \"threadcomm\";\nimport { RichWorldTasks } from \"./Tasks/RichWorldTasks.js\";\nimport { RichDataTool } from \"./Tools/RichDataTool.js\";\nimport { DataTool } from \"../Tools/Data/DataTool.js\";\nexport const DVERW = {\n    environment: \"browser\",\n    __settingsHaveBeenSynced: false,\n    tasks: RichWorldTasks,\n    TC: ThreadComm,\n    worldBounds: WorldBounds,\n    UTIL: Util,\n    settings: EngineSettings,\n    worldComm: WorldComm,\n    parentComm: ParentComm,\n    nexusComm: NexusComm,\n    constructorComm: ConstructorComm,\n    fxComm: FXComm,\n    dataComm: DataComm,\n    richData: RichDataRegister,\n    dataSyncNode: DataSyncNode,\n    data: DataManager,\n    voxelManager: VoxelManager,\n    async $INIT() {\n        await InitWorker(this);\n    },\n    getRichDataTool() {\n        return new RichDataTool();\n    },\n    getDataTool() {\n        return new DataTool();\n    },\n};\n","import { RichWorldThreadState } from \"../Threads/RichWorldThreadState.js\";\nimport { ThreadComm } from \"threadcomm\";\nexport async function InitWorker(DVERW) {\n    let parent = \"render\";\n    if (DVERW.environment == \"node\") {\n        parent = \"server\";\n    }\n    await ThreadComm.$INIT(\"rich-world\", parent);\n    await DVERW.UTIL.createPromiseCheck({\n        check: () => {\n            return RichWorldThreadState.isReady();\n        },\n        checkInterval: 1,\n    });\n}\n","import { WorldSpaces } from \"../../Data/World/WorldSpaces.js\";\nexport const RichDataRegister = {\n    _dimensions: new Map([[\"main\", new Map()]]),\n    releaeeAll() {\n        this._dimensions.clear();\n        this._dimensions = new Map([[\"main\", new Map()]]);\n    },\n    dimensions: {\n        get(dimensionId) {\n            const dimension = RichDataRegister._dimensions.get(dimensionId);\n            if (!dimension)\n                return false;\n            return dimension;\n        },\n        add(dimensionId) {\n            const newdimension = new Map();\n            RichDataRegister._dimensions.set(dimensionId, newdimension);\n            return newdimension;\n        },\n    },\n    region: {\n        _getRegionData() {\n            return {\n                columns: new Map(),\n            };\n        },\n        add(location) {\n            let dimension = RichDataRegister.dimensions.get(location[0]);\n            if (!dimension) {\n                dimension = RichDataRegister.dimensions.add(location[0]);\n            }\n            const region = this._getRegionData();\n            dimension.set(WorldSpaces.region.getKeyLocation(location), region);\n            return region;\n        },\n        get(location) {\n            const dimension = RichDataRegister.dimensions.get(location[0]);\n            if (!dimension)\n                return false;\n            const region = dimension.get(WorldSpaces.region.getKeyLocation(location));\n            if (!region)\n                return false;\n            return region;\n        },\n        remove(location) {\n            const dimension = RichDataRegister.dimensions.get(location[0]);\n            if (!dimension)\n                return false;\n            const key = WorldSpaces.region.getKeyLocation(location);\n            const region = dimension.get(key);\n            if (!region)\n                return false;\n            dimension.delete(key);\n            return region;\n        },\n    },\n    column: {\n        _getColumnData() {\n            return {\n                data: {\n                    voxels: {},\n                },\n            };\n        },\n        add(location) {\n            let region = RichDataRegister.region.get(location);\n            if (!region) {\n                region = RichDataRegister.region.add(location);\n            }\n            const column = this._getColumnData();\n            region.columns.set(WorldSpaces.column.getKeyLocation(location), column);\n            return column;\n        },\n        get(location) {\n            const region = RichDataRegister.region.get(location);\n            if (!region)\n                return false;\n            const column = region.columns.get(WorldSpaces.column.getKeyLocation(location));\n            if (!column)\n                return false;\n            return column;\n        },\n        update(location, data) {\n            const region = RichDataRegister.region.get(location);\n            if (!region)\n                return false;\n            const column = region.columns.get(WorldSpaces.column.getKeyLocation(location));\n            if (!column)\n                return false;\n            column.data = data;\n        },\n        remove(location) {\n            const region = RichDataRegister.region.get(location);\n            if (!region)\n                return false;\n            const key = WorldSpaces.column.getKeyLocation(location);\n            const column = region.columns.get(key);\n            if (!column)\n                return false;\n            region.columns.delete(key);\n            if (region.columns.size == 0) {\n                RichDataRegister.region.remove(location);\n            }\n            return column;\n        },\n    },\n    getKey(location) {\n        return `${WorldSpaces.chunk.getKeyLocation(location)}_${WorldSpaces.voxel.getKeyLocation(location)}`;\n    },\n};\n","import { DBO } from \"divine-binary-object\";\nimport { RichDataRegister } from \"../Register/RichDataRegister.js\";\nimport { RichColumnDataTool } from \"../Tools/RichColumnDataTool.js\";\nimport { RichDataTool } from \"../Tools/RichDataTool.js\";\nimport { ThreadComm } from \"threadcomm\";\nconst richTool = new RichDataTool();\nconst richColumnTool = new RichColumnDataTool();\nexport const RichWorldTasks = {\n    hasData: ThreadComm.registerTasks(\"has-data\", (location, onDone) => {\n        if (onDone)\n            onDone(Boolean(RichDataRegister.column.get(location)));\n    }, \"deferred\"),\n    getData: ThreadComm.registerTasks(\"get-data\", ([location, segment], onDone) => {\n        if (!onDone)\n            return false;\n        if (!richTool.setSegment(segment).setLocation(location).loadIn()) {\n            return onDone(false);\n        }\n        const buffer = DBO.objectToBuffer(richTool.getData());\n        onDone(buffer, buffer);\n    }, \"deferred\"),\n    setData: ThreadComm.registerTasks(\"set-data\", ([location, segment, objectBuffer], onDone) => {\n        richColumnTool.setLocation(location).loadIn();\n        richTool.setSegment(segment).setLocation(location).loadIn();\n        if (onDone)\n            onDone(richTool.setData(DBO.bufferToObject(objectBuffer)).commit());\n    }, \"deferred\"),\n    removeData: ThreadComm.registerTasks(\"remove-data\", ([location, segment], onDone) => {\n        if (onDone)\n            onDone(richTool.setSegment(segment).setLocation(location).delete());\n    }, \"deferred\"),\n    removeColumn: ThreadComm.registerTasks(\"remove-column\", (location, onDone) => {\n        const column = RichDataRegister.column.get(location);\n        if (!column)\n            return onDone(false);\n        RichDataRegister.column.remove(location);\n        onDone(true);\n    }, \"deferred\"),\n    getColumn: ThreadComm.registerTasks(\"get-column\", (location, onDone) => {\n        const column = RichDataRegister.column.get(location);\n        if (!column)\n            return onDone(false);\n        const buf = DBO.objectToBuffer(column.data);\n        onDone(buf, buf);\n    }, \"deferred\"),\n    setColumn: ThreadComm.registerTasks(\"set-column\", ([location, buffer], onDone) => {\n        if (!onDone)\n            return false;\n        const column = RichDataRegister.column.add(location);\n        column.data = DBO.bufferToObject(buffer);\n        return onDone(true);\n    }, \"deferred\"),\n    releaseAllData: ThreadComm.registerTasks(\"release-all-data\", (data, onDone) => {\n        RichDataRegister.releaeeAll();\n        if (onDone)\n            onDone(true);\n    }, \"deferred\"),\n};\n","import { WorldComm } from \"./RichWorldThreads.js\";\nexport const RichWorldThreadState = {\n    _settingsSynced: false,\n    isReady() {\n        return WorldComm.isReady() && this._settingsSynced;\n    },\n};\n","import { EngineSettings } from \"../../Data/Settings/EngineSettings.js\";\nimport { ThreadComm } from \"threadcomm\";\nimport { RichWorldThreadState } from \"./RichWorldThreadState.js\";\nimport { DataHooks } from \"../../Data/DataHooks.js\";\nexport const ParentComm = ThreadComm.parent;\nexport const WorldComm = ThreadComm.createComm(\"world\");\nexport const NexusComm = ThreadComm.createComm(\"nexus\");\nexport const FXComm = ThreadComm.createComm(\"fx\");\nexport const DataComm = ThreadComm.createComm(\"data-loader\");\nexport const ConstructorComm = ThreadComm.createCommManager({\n    name: \"constructor\",\n    onPortSet() { },\n});\nThreadComm.registerTasks(\"sync-settings\", (settings) => {\n    EngineSettings.syncSettings(settings);\n    RichWorldThreadState._settingsSynced = true;\n    DataHooks.settingsSynced.run(settings);\n});\n","import { DBO } from \"divine-binary-object\";\nimport { RichDataRegister } from \"../Register/RichDataRegister.js\";\nimport { RichDataSegmentTool } from \"../../Tools/Classes/RichDataToolBase.js\";\nexport class RichColumnDataTool extends RichDataSegmentTool {\n    column;\n    loadIn() {\n        let column = RichDataRegister.column.get(this.location);\n        if (!column) {\n            column = RichDataRegister.column.add(this.location);\n        }\n        this.sceham = column.data;\n        this.column = column;\n        return true;\n    }\n    toBuffer() {\n        return DBO.objectToBuffer(this.sceham);\n    }\n}\n","import { RichDataRegister } from \"../Register/RichDataRegister.js\";\nimport { DBO } from \"divine-binary-object\";\nimport { RichDataSegmentTool } from \"../../Tools/Classes/RichDataToolBase.js\";\nimport { RichColumnDataTool } from \"./RichColumnDataTool.js\";\nimport { ColumnDataTool } from \"../../Tools/Data/WorldData/ColumnDataTool.js\";\nclass RichDataTool extends RichDataSegmentTool {\n    data;\n    static richColumn = new RichColumnDataTool();\n    static columnTool = new ColumnDataTool();\n    loadIn() {\n        const column = RichDataRegister.column.get(this.location);\n        if (!column)\n            return false;\n        this.sceham = column.data;\n        const segment = column.data[this.segment];\n        if (!segment)\n            return false;\n        const data = segment[RichDataRegister.getKey(this.location)];\n        if (!data)\n            return false;\n        this.data = data;\n        return true;\n    }\n    setData(data) {\n        this.data = data;\n        return this;\n    }\n    getData() {\n        return this.data;\n    }\n    delete() {\n        const segment = this.getSegment();\n        if (!segment)\n            return false;\n        delete segment[RichDataRegister.getKey(this.location)];\n        this.data = null;\n        const column = RichDataRegister.column.get(this.location);\n        if (!column)\n            return;\n        let items = false;\n        for (const segment in column.data) {\n            const seg = column.data[segment];\n            if (Object.keys(seg).length != 0) {\n                items = true;\n            }\n        }\n        if (!items) {\n            RichDataRegister.column.remove(this.location);\n            RichDataTool.columnTool.loadInAtLocation(this.location);\n            RichDataTool.columnTool.setRichData(false);\n        }\n        return true;\n    }\n    commit() {\n        const segment = this.getSegment();\n        if (!segment)\n            return false;\n        segment[RichDataRegister.getKey(this.location)] = this.data;\n        this.data = null;\n        if (RichDataTool.columnTool.loadInAtLocation(this.location)) {\n            RichDataTool.columnTool.markAsNotStored();\n            RichDataTool.columnTool.setRichData(true);\n        }\n        return true;\n    }\n    toBuffer() {\n        if (!this.data)\n            return false;\n        return DBO.objectToBuffer(this.data);\n    }\n}\nexport { RichDataTool };\n","export * from \"./DivineStarVoxelEngineRichWorld.js\";\n","import { DataToolBase } from \"./DataToolBase.js\";\nexport class RichDataSegmentTool extends DataToolBase {\n    sceham = {};\n    segment = \"voxel\";\n    constructor() {\n        super();\n    }\n    setSegment(segment) {\n        this.segment = segment;\n        if (!this.sceham[segment]) {\n            this.sceham[segment] = {};\n        }\n        return this;\n    }\n    getSegment() {\n        const segment = this.sceham[this.segment];\n        if (segment)\n            return segment;\n        return false;\n    }\n    getAll() {\n        if (this.sceham)\n            return this.sceham;\n        return false;\n    }\n}\n","export class RegisterDataManager {\n    data = new Map();\n    getData(id) {\n        const voxelData = this.data.get(id);\n        if (!voxelData) {\n            throw new Error(`Voxel with ${id} does not exists.`);\n        }\n        return voxelData;\n    }\n    registerData(data) {\n        if (Array.isArray(data)) {\n            for (const voxel of data) {\n                this.data.set(voxel.id, voxel);\n            }\n            return;\n        }\n        this.data.set(data.id, data);\n    }\n    clear() {\n        this.data.clear();\n    }\n}\n","import { RegisterDataManager } from \"../Classes/RegisterDataManager.js\";\nexport const VoxelManager = new RegisterDataManager();\nexport const SubstanceManager = new RegisterDataManager();\nSubstanceManager.registerData([\n    {\n        id: \"#dve_solid\",\n        tags: [\n            [\"#dve_parent_substance\", \"#dve_solid\"],\n            [\"#dve_rendered_substance\", \"#dve_solid\"],\n            [\"#dve_is_solid\", true],\n            [\"#dve_is_liquid\", false],\n            [\"#dve_flow_rate\", 0],\n            [\"#dve_culled_substances\", [\"#dve_solid\"]],\n        ],\n    },\n    {\n        id: \"#dve_translucent\",\n        tags: [\n            [\"#dve_parent_substance\", \"#dve_flora\"],\n            [\"#dve_rendered_substance\", \"#dve_solid\"],\n            [\"#dve_is_solid\", true],\n            [\"#dve_is_liquid\", false],\n            [\"#dve_flow_rate\", 0],\n            [\"#dve_culled_substances\", []],\n        ],\n    },\n    {\n        id: \"#dve_transparent\",\n        tags: [\n            [\"#dve_parent_substance\", \"#dve_solid\"],\n            [\"#dve_rendered_substance\", \"#dve_solid\"],\n            [\"#dve_is_solid\", true],\n            [\"#dve_is_liquid\", false],\n            [\"#dve_flow_rate\", 0],\n            [\"#dve_culled_substances\", [\"#dve_transparent\"]],\n        ],\n    },\n    {\n        id: \"#dve_flora\",\n        tags: [\n            [\"#dve_parent_substance\", \"#dve_flora\"],\n            [\"#dve_rendered_substance\", \"#dve_flora\"],\n            [\"#dve_is_solid\", true],\n            [\"#dve_is_liquid\", false],\n            [\"#dve_flow_rate\", 0],\n            [\"#dve_culled_substances\", []],\n        ],\n    },\n    {\n        id: \"#dve_liquid\",\n        tags: [\n            [\"#dve_parent_substance\", \"#dve_liquid\"],\n            [\"#dve_rendered_substance\", \"#dve_liquid\"],\n            [\"#dve_is_solid\", false],\n            [\"#dve_is_liquid\", true],\n            [\"#dve_flow_rate\", 1],\n            [\"#dve_culled_substances\", [\"#dve_liquid\", \"#dve_solid\"]],\n        ],\n    },\n    {\n        id: \"#dve_magma\",\n        tags: [\n            [\"#dve_parent_substance\", \"#dve_liquid\"],\n            [\"#dve_rendered_substance\", \"#dve_liquid\"],\n            [\"#dve_is_solid\", false],\n            [\"#dve_is_liquid\", true],\n            [\"#dve_flow_rate\", 3],\n            [\"#dve_culled_substances\", [\"#dve_liquid\", \"#dve_solid\"]],\n        ],\n    },\n]);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"DSLIBS_divineBinaryObject_dist_index_js-DSLIBS_divineVoxelEngine_dist_Common_Threads_Contract-5324f4\"], () => (__webpack_require__(\"./compiled/client/RichWorld/richworld.js\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && !queue.d) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = 1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && (queue.d = 0);\n};","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".DVE.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"compiled_client_RichWorld_richworld_js\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkdve_testing\"] = self[\"webpackChunkdve_testing\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(\"DSLIBS_divineBinaryObject_dist_index_js-DSLIBS_divineVoxelEngine_dist_Common_Threads_Contract-5324f4\").then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":[],"sourceRoot":""}