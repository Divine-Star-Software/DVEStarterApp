{"version":3,"file":"compiled_client_World_world_js.DVE.js","mappings":";;;;;;;;;;;;;;;;AAAiD;AACN;AACpC;AACP,wBAAwB,mEAA8B;AACtD,qBAAqB,uEAAgB;AACrC,kBAAkB,oEAAa;AAC/B,IAAI,4EAAqB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+EAAwB;AAChC;AACA,KAAK;AACL,IAAI,4EAAqB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+EAAwB;AACpC;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;AC9BiD;AACX;AAC/B;AACP;AACA;AACA;AACA;AACA;AACA,oBAAoB,sEAAe;AACnC,kBAAkB,wEAAiB;AACnC;AACA,yBAAyB,UAAU;AACnC,6BAA6B,UAAU;AACvC,YAAY,mEAA4B;AACxC;AACA;AACA;AACA;AACA,yBAAyB,UAAU;AACnC,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvBiD;AACjD,cAAc,oEAAa;AACpB;AACP;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8BAA8B;AAC3D;AACA,iCAAiC,8BAA8B;AAC/D,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,6BAA6B,8BAA8B;AAC3D,iCAAiC,8BAA8B;AAC/D,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,6BAA6B,8BAA8B;AAC3D,iCAAiC,8BAA8B;AAC/D,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,6BAA6B,8BAA8B;AAC3D,iCAAiC,8BAA8B;AAC/D,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,6BAA6B,8BAA8B;AAC3D,iCAAiC,8BAA8B;AAC/D,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;AC5NO;AACP,cAAc;AACd;AACA,eAAe;AACf;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;ACRyC;AACQ;AACE;AAC5C;AACP,cAAc;AACd;AACA,cAAc,+DAAa;AAC3B,KAAK;AACL;AACA,QAAQ,8EAAuB;AAC/B,QAAQ,oEAA+B;AACvC,QAAQ,iEAA4B;AACpC;AACA,SAAS;AACT,QAAQ,uDAAkB;AAC1B,KAAK;AACL,oBAAoB;AACpB;;;;;;;;;;;;;;;;;;;;;;;ACjBwC;AACS;AAC4C;AAC7F,WAAW,mBAAmB;AAC+B;AACpB;AACW;AACN;AACe;AACtD;AACP,IAAI,6DAAoB;AACxB;AACA;AACA,gBAAgB,4EAAqB;AACrC;AACA;AACA,oBAAoB,8DAAqB;AACzC;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB,gBAAgB,4EAAqB;AACrC,oBAAoB,uEAAsB;AAC1C,iBAAiB;AACjB,gBAAgB,mGAAiB,CAAC,2DAAI;AACtC,sBAAsB,iEAAU;AAChC,sBAAsB,yDAAoB;AAC1C,0CAA0C,2EAAiB,CAAC,2DAAI;AAChE,gBAAgB,4DAAoB;AACpC,gBAAgB,mEAAkB;AAClC,gBAAgB,yEAAe;AAC/B,gBAAgB,8DAAqB;AACrC,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,gBAAgB,8DAAqB;AACrC,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,sBAAsB,oEAAmB;AACzC;AACA,gBAAgB,8DAAqB;AACrC,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,gBAAgB,yEAAwB;AACxC,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA,eAAe,4DAAW;;;;;;;;;;;;;;;;;AC7DqD;AAC5B;AAC5C,iBAAiB,4EAAa;AACrC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,oBAAoB,6BAA6B;AACjD;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,oBAAoB,6BAA6B;AACjD;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD;AACA,gEAAmB;;;;;;;;;;;;;;AClC8B;AACjD,MAAM,uEAAqB;;;;;;;;;;;;;;;;;ACDpB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;AClOA;;;;;;;;;;;;;;ACAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,eAAe,2BAA2B,2BAA2B;AAC9G;AACA;AACA,yCAAyC,eAAe,8BAA8B,cAAc,eAAe,4BAA4B;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,eAAe,2BAA2B,2BAA2B;AAC9G;AACA;AACA,yCAAyC,eAAe,8BAA8B,cAAc,eAAe,4BAA4B;AAC/I;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;AChC6C;AACI;AAC1C;AACP,WAAW,kEAAsB;AACjC;AACO;AACP,eAAe,0DAAY;AAC3B;;;;;;;;;;;;;;;;;ACPA;AAC0D;AACkB;AAC5E;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,cAAc,wEAAY,cAAc,6FAAyB;AACjE,iBAAiB,wEAAY,gBAAgB,wGAAoC;AACjF;AACA,eAAe,wEAAY,gBAAgB,+FAA2B;AACtE,KAAK;AACL,cAAc,wEAAY,cAAc,6FAAyB;AACjE,cAAc,wEAAY,aAAa,6FAAyB;AAChE;AACO;;;;;;;;;;;;;;;;;;ACjE6F;AAC5D;AACkB;AAC1D,kBAAkB,+DAAQ;AACnB;AACP,gBAAgB,gEAAwB,CAAC,uHAAuC;AAChF;AACA,2DAA2D;AAC3D,KAAK;AACL;;;;;;;;;;;;;;;ACTO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzBO;AACA;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;ACLO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvBA;AACmD;AACnD;AACuC;AACU;AACjD,kBAAkB,yDAAQ;AACnB;AACP,gBAAgB,8DAAU,KAAK,gDAAS;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;;;;ACzEwD;AACQ;AACE;AACI;AACF;AAC7D,wBAAwB,4EAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,6DAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2FAAkC;AACzD;AACA;AACA,mBAAmB,2FAAkC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAwB;AAChC;AACA;AACA;AACA,QAAQ,iFAAwB;AAChC;AACA;AACA;AACA,QAAQ,oFAA0B;AAClC;AACA;AACA;AACA,QAAQ,qFAA2B;AACnC;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACjHkE;AACC;AAC3B;AACqC;AACnB;AAC1D,mBAAmB,yDAAiB;AACpC,0BAA0B,kFAAiB;AAC3C,4BAA4B,2EAAa;AACzC,gBAAgB,+DAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA,2FAA2F;AAC3F;AACA;AACA;AACA,uBAAuB,kFAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAyB;AACjC;AACA;AACA;AACA;AACA;AACA;AACuB;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CgE;AAC/C;AAC6B;AACH;AACE;AACJ;AACO;AACnB;AACM;AACL;AACY;AACjE,6BAA6B,4EAAiB;AAC9C,gCAAgC,6EAAc;AAC9C;AACA,qBAAqB,0DAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0DAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+FAAiC;AACrD,QAAQ,oEAAoB;AAC5B,QAAQ,iFAAiC;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,QAAQ,wEAAwB;AAChC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,YAAY,wEAAkB,eAAe,kFAAwB;AACrE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,gGAAwB;AACzC;AACA;AACA,iBAAiB;AACjB;AACA;AACA,2BAA2B,qGAA6B;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,wBAAwB,sFAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yEAAU;AACpC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB,uEAAY;AACrC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,wBAAwB,sFAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,yBAAyB,uEAAY;AACrC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wBAAwB,sFAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sFAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0B;;;;;;;;;;;;;;;;AC7Q6B;AAChD;AACP,cAAc,4DAAO;AACrB,gBAAgB;AAChB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;AC5BmF;AAC3C;AAC0B;AACR;AAC4B;AACxB;AACvD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU,GAAG,oFAA4B,UAAU;AAC/E,QAAQ,2FAAW;AACnB;AACA,uBAAuB,6DAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA,gBAAgB,+EAAmB,CAAC,uGAA4B;AAChE,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB,+EAAmB,CAAC,uGAA4B;AAChE,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB,+EAAmB,CAAC,sGAA2B;AAC/D,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oBAAoB,+EAAmB,CAAC,sGAA2B;AACnE;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,oBAAoB,kGAAkB;AACtC;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,oBAAoB,kGAAkB;AACtC,oBAAoB,qGAAqB;AACzC,iBAAiB;AACjB;AACA,0BAA0B,0GAA0B;AACpD,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA,sBAAsB;AACtB;AACA;AACA,oBAAoB,+EAAmB,CAAC,uGAA4B;AACpE,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,YAAY,+EAAmB,CAAC,qGAA0B;AAC1D,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAmB,CAAC,0GAA+B;AACnE,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAmB,CAAC,+GAAoC;AACxE,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB,kGAAkB;AAClC,aAAa;AACb;AACA,gBAAgB,kGAAkB;AAClC,gBAAgB,qGAAqB;AACrC,aAAa;AACb;AACA,sBAAsB,0GAA0B;AAChD,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAmB,CAAC,oGAAyB;AAC7D,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB,+FAAe;AAC/B,aAAa;AACb;AACA,gBAAgB,+FAAe;AAC/B,gBAAgB,kGAAkB;AAClC,aAAa;AACb;AACA,sBAAsB,uGAAuB;AAC7C,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAmB,CAAC,oGAAyB;AAC7D,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB,+FAAe;AAC/B,aAAa;AACb;AACA,gBAAgB,+FAAe;AAC/B,gBAAgB,kGAAkB;AAClC,aAAa;AACb;AACA,sBAAsB,uGAAuB;AAC7C,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAmB,CAAC,oGAAyB;AAC7D,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB,+FAAe;AAC/B,gBAAgB,mFAAyB;AACzC,aAAa;AACb;AACA,gBAAgB,+FAAe;AAC/B,gBAAgB,kGAAkB;AAClC,aAAa;AACb;AACA,sBAAsB,uGAAuB;AAC7C,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;;;;;;;;ACzKO;AACP;AACA;AACA;AACA;AACA,0CAA0C,IAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACrBgD;AACN;AACwC;AAC3E;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,6BAA6B;AAC7B,2BAA2B;AAC3B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oGAAkC;AAClD;AACA,YAAY,mEAAyB;AACrC;AACA;AACA;AACA,oBAAoB,4EAAkC;AACtD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB,oGAAkC;AAClD;AACA,YAAY,mEAAyB;AACrC;AACA;AACA;AACA,oBAAoB,4EAAkC;AACtD;AACA,aAAa;AACb;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9KA;AACwE;AACN;AACU;AACJ;AACG;AACyB;AAC1C;AAC6B;AACA;AACpB;AACa;AACV;AACK;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ,2FAA4B;AACpC,QAAQ,iFAAoB;AAC5B,QAAQ,oGAAgC;AACxC,QAAQ,0FAAwB;AAChC,QAAQ,sEAAkB;AAC1B,QAAQ,wEAAmB;AAC3B,QAAQ,wEAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,2FAAqB;AAC/C;AACA;AACA,sCAAsC,yGAA+B;AACrE;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,0BAA0B,uFAAiB;AAC3C;AACA;AACA,8BAA8B,iFAAuB;AACrD;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,0BAA0B,wFAAkB;AAC5C;AACA;AACA,+BAA+B,kFAAwB;AACvD;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,0BAA0B,wFAAkB;AAC5C;AACA;AACA,+BAA+B,kFAAwB;AACvD;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,0BAA0B,8FAAwB;AAClD;AACA;AACA,qCAAqC,gGAAwB;AAC7D;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,0BAA0B,2FAAqB;AAC/C;AACA;AACA,gBAAgB,wEAAkB;AAClC,gBAAgB,iFAA2B;AAC3C;AACA;AACA,SAAS;AACT;AACA,0BAA0B,+FAAyB;AACnD;AACA,+BAA+B,qFAAsB;AACrD;AACA,SAAS;AACT;AACA,0BAA0B,2FAAqB;AAC/C;AACA,+BAA+B,sEAAsB;AACrD;AACA,SAAS;AACT;AACA,0BAA0B,4FAAsB;AAChD;AACA,+BAA+B,wEAAuB;AACtD;AACA,SAAS;AACT;AACA,0BAA0B,4FAAsB;AAChD;AACA;AACA,gBAAgB,wEAAuB;AACvC,gBAAgB,gFAA+B;AAC/C;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,0BAA0B,8FAAwB;AAClD;AACA;AACA,gBAAgB,kGAAmC;AACnD,gBAAgB,8FAA+B;AAC/C;AACA;AACA,SAAS;AACT;AACA,0BAA0B,kGAA4B;AACtD;AACA;AACA,gBAAgB,2GAAuC;AACvD,gBAAgB,uGAAmC;AACnD;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,0BAA0B,mGAA6B;AACvD;AACA;AACA;AACA,SAAS;AACT;AACA,0BAA0B,mGAA6B;AACvD;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;;;;AC9OqF;AAC9B;AACqB;AACH;AAClE;AACP;AACA;AACA,mCAAmC,yFAAiC;AACpE;AACA;AACA,QAAQ,kGAAiC;AACzC;AACA,yBAAyB,0FAAyB,CAAC,8FAAsC;AACzF;AACA;AACA,QAAQ,iFAAmB;AAC3B,QAAQ,qFAAuB;AAC/B;AACA,uCAAuC,yFAAiC;AACxE,gCAAgC,2GAA0C;AAC1E;AACA;AACA,YAAY,uFAAyB;AACrC,YAAY,gGAA+B,CAAC,2EAAa;AACzD;AACA;AACA,qBAAqB,4FAA2B;AAChD;AACA,gBAAgB,4FAA2B,YAAY,2EAAa;AACpE;AACA;AACA,QAAQ,uFAA+B;AACvC,KAAK;AACL;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;ACjDA;AACuD;AACkB;AACL;AACP;AACa;AACb;AACtD;AACP;AACA;AACA,mCAAmC,qFAA6B;AAChE;AACA;AACA,QAAQ,2FAAkC;AAC1C;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD,4BAA4B,0FAAiC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kFAAqB,CAAC,0FAAkC;AACjF;AACA;AACA,QAAQ,qEAAe;AACvB,QAAQ,yEAAmB;AAC3B;AACA,mCAAmC,qFAA6B;AAChE,2BAA2B,+FAAsC;AACjE;AACA;AACA,YAAY,2EAAqB;AACjC,YAAY,wFAA2B,CAAC,+DAAS;AACjD;AACA;AACA,qBAAqB,oFAAuB;AAC5C;AACA,0BAA0B,uFAAsB;AAChD;AACA;AACA,yBAAyB,oEAAc;AACvC,yBAAyB,oEAAc;AACvC,yBAAyB,oEAAc;AACvC,oBAAoB,sEAAgB,CAAC,uFAAsB;AAC3D;AACA;AACA,gBAAgB,oFAAuB,YAAY,+DAAS;AAC5D;AACA;AACA,QAAQ,kFAA0B;AAClC,QAAQ,mFAA2B;AACnC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0CAA0C,iCAAiC;AAC3E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;;;;;ACpFsD;AACuC;AACxC;AACE;AACA;AAChD;AACP;AACA;AACA;AACA,uBAAuB,2EAAuB;AAC9C;AACA,oDAAoD,qEAAqB;AACzE,YAAY,uEAAuB;AACnC,YAAY,oEAAoB,gBAAgB,4EAAgB;AAChE,YAAY,oEAAoB,mBAAmB,kFAAsB;AACzE;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,uBAAuB,2EAAuB;AAC9C;AACA,oDAAoD,uEAAsB;AAC1E,YAAY,yEAAwB;AACpC,YAAY,sEAAqB,gBAAgB,4EAAgB;AACjE,YAAY,sEAAqB,mBAAmB,mFAAuB;AAC3E;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,uBAAuB,2EAAuB;AAC9C;AACA,oDAAoD,uEAAsB;AAC1E,YAAY,yEAAwB;AACpC,YAAY,sEAAqB,gBAAgB,4EAAgB;AACjE,YAAY,sEAAqB,mBAAmB,mFAAuB;AAC3E;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;;AC1CwE;AACjE,yBAAyB,gFAAmB;AAC5C,6BAA6B,gFAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;ACtEkF;AAC5B;AAC/C,gCAAgC,8DAAU;AACjD;AACA;AACA,YAAY,2FAAsB;AAClC;AACA;AACA,KAAK;AACL;AACA,YAAY,6FAAwB;AACpC;AACA;AACA,KAAK;AACL;AACA,YAAY,qGAAgC;AAC5C;AACA;AACA,KAAK;AACL;AACA,YAAY,4FAAuB;AACnC;AACA;AACA,KAAK;AACL;AACA,YAAY,6FAAwB;AACpC;AACA;AACA,KAAK;AACL;AACA,YAAY,6FAAwB;AACpC;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;ACnC0E;AACpB;AAC/C,4BAA4B,8DAAU;AAC7C;AACA;AACA,YAAY,sFAAqB;AACjC;AACA;AACA,KAAK;AACL;AACA,YAAY,oFAAmB;AAC/B;AACA;AACA,KAAK;AACL;AACA,YAAY,uFAAsB;AAClC;AACA;AACA,KAAK;AACL;AACA,YAAY,4FAA2B;AACvC;AACA;AACA,KAAK;AACL;AACA,YAAY,qFAAoB;AAChC;AACA;AACA,KAAK;AACL;AACA,YAAY,0FAAyB;AACrC;AACA;AACA,KAAK;AACL;AACA,YAAY,uFAAsB;AAClC;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,mFAAkB;AAC9B;AACA;AACA,KAAK;AACL;AACA,YAAY,qFAAoB;AAChC;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;ACnDmE;AACnB;AACiB;AACiB;AACR;AACnE,0BAA0B,0DAAU;AAC3C;AACA,QAAQ,2FAAsB;AAC9B;AACA;AACA,CAAC;AACD;AACA,QAAQ,6FAAwB;AAChC;AACA;AACA,CAAC;AACD;AACA,QAAQ,gGAA2B;AACnC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA,QAAQ,sFAAqB;AAC7B;AACA;AACA,CAAC;AACD;AACA,QAAQ,sFAAqB;AAC7B;AACA;AACA,CAAC;AACM;AACP;AACA,YAAY,sFAAqB;AACjC;AACA,gBAAgB,mFAA2B;AAC3C,KAAK;AACL;AACA,YAAY,qFAAoB;AAChC;AACA,gBAAgB,mFAA2B;AAC3C,KAAK;AACL;AACA,YAAY,2FAA0B;AACtC;AACA;AACA,gBAAgB,mFAA2B;AAC3C,KAAK;AACL;AACA,YAAY,8FAA6B;AACzC;AACA;AACA,gBAAgB,mFAA2B;AAC3C,KAAK;AACL;AACA,YAAY,8FAA6B;AACzC;AACA;AACA,gBAAgB,mFAA2B;AAC3C,KAAK;AACL;AACA,YAAY,oGAAmC;AAC/C;AACA;AACA,gBAAgB,mFAA2B;AAC3C,KAAK;AACL;AACA;AACA,KAAK;AACL,IAAI,2EAAe;AACnB;;;;;;;;;;;;;;;;;;;ACrFgD;AACsB;AACY;AAC3E,2BAA2B,0DAAU;AAC5C;AACA,QAAQ,2FAAsB;AAC9B;AACA;AACA,CAAC;AACD;AACA,QAAQ,6FAAwB;AAChC;AACA;AACA,CAAC;AACD;AACA,QAAQ,gGAA2B;AACnC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACM;AACP;AACA;AACA,KAAK;AACL,IAAI,8EAAgB;AACpB;;;;;;;;;;;;;;;;;;;;;ACrFiE;AACuB;AACxC;AACkC;AAC3E,2BAA2B,0DAAU;AAC5C;AACA,QAAQ,2FAAsB;AAC9B;AACA;AACA,CAAC;AACD;AACA,QAAQ,6FAAwB;AAChC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,QAAQ,gGAA2B;AACnC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACD;AACA,QAAQ,8FAAyB;AACjC;AACA;AACA,CAAC;AACM,mCAAmC,0DAAU;AAC7C;AACP;AACA;AACA,KAAK;AACL,IAAI,8EAAgB;AACpB;AACA;AACA;AACA;AACA,gBAAgB,0FAAkC;AAClD,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,0FAAkC;AAClD,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,0FAAkC;AAClD,KAAK;AACL;AACA;AACA,KAAK;AACL,IAAI,oFAAsB;AAC1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACyG;AACzG;AAC0E;AAC1E;AACuE;AACvE;AACoE;AACpB;AAChD;AAC8C;AACO;AAC6B;AACL;AAC7E;AACwE;AACxE;AAC4D;AACe;AACF;AACE;AACtB;AACE;AACkB;AACE;AACR;AACnE;AAC4D;AACpB;AACiB;AACN;AACU;AACmB;AAChF;AACA;AACA;AACA;AACO;AACP;AACA,QAAQ,mDAAU;AAClB,UAAU,wDAAI;AACd,cAAc,4EAAc;AAC5B,gBAAgB,6DAAU;AAC1B;AACA,mBAAmB,sFAAkB;AACrC,KAAK;AACL,UAAU,6DAAW;AACrB,cAAc,uDAAQ;AACtB,YAAY,4DAAM;AAClB,cAAc,8DAAQ;AACtB,eAAe,+DAAS;AACxB,gBAAgB,gEAAU;AAC1B,SAAS,yDAAG;AACZ,mBAAmB,mEAAa;AAChC,aAAa,kFAAiB;AAC9B,YAAY,+EAAgB;AAC5B;AACA,gBAAgB,wEAAY;AAC5B,oBAAoB,4EAAgB;AACpC,KAAK;AACL;AACA,gBAAgB,iFAAe;AAC/B,oBAAoB,0FAAmB;AACvC,gBAAgB,mEAAa;AAC7B,KAAK;AACL;AACA,cAAc,0EAAe;AAC7B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,eAAe,wFAAoB;AACnC,KAAK;AACL;AACA,mBAAmB,qEAAW;AAC9B,KAAK;AACL;AACA,mBAAmB,8DAAQ;AAC3B,KAAK;AACL;AACA,mBAAmB,oFAAc;AACjC,KAAK;AACL;AACA,mBAAmB,kFAAa;AAChC,KAAK;AACL;AACA,mBAAmB,oFAAc;AACjC,KAAK;AACL;AACA,mBAAmB,kFAAa;AAChC,KAAK;AACL;AACA,mBAAmB,gEAAQ;AAC3B,KAAK;AACL;AACA,mBAAmB,4EAAc;AACjC,KAAK;AACL;AACA,mBAAmB,sEAAY;AAC/B,KAAK;AACL;AACA,mBAAmB,sEAAkB;AACrC;;;;;;;;;;;;;;;;;;;AChHuD;AAC0B;AAC/B;AACK;AAChD;AACP,kBAAkB,yEAAiB;AACnC;AACA,QAAQ,mFAA2B;AACnC,yBAAyB,8EAAsB;AAC/C;AACA;AACA;AACA;AACA,IAAI,mFAAmC,aAAa,mGAA+B;AACnF,IAAI,kFAAkC,OAAO,mGAA+B;AAC5E,IAAI,8EAA8B;AAClC,QAAQ,4EAA6B;AACrC,KAAK;AACL,IAAI,iFAAiC;AACrC;AACA,YAAY,8EAA+B;AAC3C;AACA;AACA;AACA,YAAY,8EAA+B;AAC3C,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,IAAI,oFAAoC,aAAa,oGAAgC;AACrF,IAAI,mFAAmC,OAAO,oGAAgC;AAC9E,IAAI,+EAA+B,iBAAiB,6EAA8B;AAClF,IAAI,kFAAkC;AACtC;AACA,YAAY,+EAAgC;AAC5C;AACA;AACA;AACA,YAAY,+EAAgC;AAC5C,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,IAAI,oFAAoC,aAAa,oGAAgC;AACrF,IAAI,mFAAmC,OAAO,oGAAgC;AAC9E,IAAI,+EAA+B;AACnC,QAAQ,6EAA8B;AACtC,KAAK;AACL,IAAI,kFAAkC;AACtC;AACA,YAAY,+EAAgC;AAC5C;AACA;AACA;AACA,YAAY,+EAAgC;AAC5C,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,IAAI,yFAAyC;AAC7C;AACA,KAAK;AACL;AACA;AACA;AACA,IAAI,gGAAgD;AACpD,QAAQ,6EAAqB;AAC7B,QAAQ,gFAAiC;AACzC,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;ACxEwC;AAC4B;AACF;AACnB;AACE;AACqB;AAC/D;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAgB;AAC9B,QAAQ,gFAAiB;AACzB;AACA;AACA,uBAAuB,kFAAwB;AAC/C,aAAa;AACb;AACA,SAAS;AACT,QAAQ,gEAAwB;AAChC,YAAY,6DAAc;AAC1B;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT,QAAQ,+DAAe,KAAK,2EAAc;AAC1C,KAAK;AACL;;;;;;;;;;;;;;;;;;;AChCkE;AACJ;AACP;AACU;AAC1D;AACP,eAAe,4DAAO;AACtB,kBAAkB;AAClB;AACA;AACA,KAAK;AACL,kBAAkB,4DAAO;AACzB;AACA;AACA;AACA;AACA,oCAAoC,yFAAiC;AACrE,oCAAoC,yFAAiC;AACrE;AACA;AACA,iCAAiC,QAAQ,KAAK,oFAA4B;AAC1E,qCAAqC,QAAQ,KAAK,oFAA4B;AAC9E,yCAAyC,QAAQ,KAAK,oFAA4B;AAClF;AACA,mCAAmC,yFAAiC;AACpE;AACA;AACA,gCAAgC,kFAAwB;AACxD;AACA;AACA;AACA,gCAAgC,mFAAyB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kFAAwB;AAC5D;AACA;AACA,oCAAoC,mFAAyB;AAC7D;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sEAAY;AACzC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5EwC;AACxC;AACkE;AACY;AAC/B;AAC+B;AACA;AACF;AACW;AACjB;AACR;AACC;AACd;AACjD,uBAAuB,mFAAc;AACrC,uBAAuB,mFAAc;AACrC,sBAAsB,iFAAa;AACnC,2BAA2B,2EAAc;AACzC,wBAAwB,qEAAW;AACnC;AACO;AACP,cAAc,gEAAwB;AACtC,sBAAsB,iFAAuB;AAC7C;AACA,YAAY,4EAA6B;AACzC;AACA;AACA;AACA,YAAY,8FAAsC;AAClD,uCAAuC,sFAA8B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,YAAY,iFAAuB,WAAW,mGAA+B;AAC7E;AACA,KAAK;AACL,gBAAgB,gEAAwB;AACxC,cAAc,kEAAiB;AAC/B;AACA;AACA,KAAK;AACL,kBAAkB,gEAAwB;AAC1C,cAAc,qEAAoB;AAClC;AACA;AACA,KAAK;AACL;AACA,sBAAsB,gEAAwB;AAC9C,gBAAgB,mEAAkB;AAClC;AACA,YAAY,+EAAgC;AAC5C,YAAY,qFAA2B;AACvC,2BAA2B,kFAAwB;AACnD;AACA,gBAAgB,qFAA2B;AAC3C,gBAAgB,+EAAgC;AAChD;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,oBAAoB,gEAAwB;AAC5C;AACA;AACA;AACA,YAAY,kFAAwB;AACpC,YAAY,6EAA8B;AAC1C,SAAS;AACT,0BAA0B,gEAAwB;AAClD,YAAY,gGAAwB;AACpC;AACA,YAAY,mFAAoC;AAChD,SAAS;AACT,oBAAoB,gEAAwB;AAC5C;AACA;AACA;AACA,YAAY,kFAAwB;AACpC,YAAY,6EAA8B;AAC1C,SAAS;AACT,mBAAmB,gEAAwB;AAC3C;AACA;AACA;AACA,YAAY,iFAAuB;AACnC,YAAY,4EAA6B;AACzC,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;AChGO;AACP;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;;ACL+C;AACN;AAC8B;AACd;AACL;AAC7C,YAAY,qEAA4B;AAC/C;AACA,iCAAiC;AACjC,CAAC;AACD,oEAAqB;AACd,iBAAiB,8DAAqB,kBAAkB;AAC/D,oEAAqB;AACd,eAAe,8DAAqB;AAC3C,oEAAqB;AACd,kBAAkB,8DAAqB;AAC9C,oEAAqB;AACrB;AACA;AACA,CAAC;AACM,sBAAsB,8DAAqB;AAClD,oEAAqB;AACd,mBAAmB,0DAAiB;AAC3C,oEAAqB;AACrB,iEAAwB;AACxB,IAAI,yFAA2B;AAC/B,IAAI,kFAAgC;AACpC,IAAI,4EAA4B;AAChC,CAAC;;;;;;;;;;;;;;;;AC3B2C;;;;;;;;;;;;;;;;ACA0C;AAC/E;AACP;AACA;AACA,QAAQ,iEAAqB,OAAO,6DAAiB;AACrD,QAAQ,+DAAmB,OAAO,2DAAe;AACjD;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdmC;AACI;AACF;AACG;;;;;;;;;;;;;;;;;;ACHqB;AACZ;AACF;AACxC;AACP,UAAU,yEAAe;AACzB,eAAe,wDAAW,OAAO,yDAAa;AAC9C;;;;;;;;;;;;;;;;ACN6D;AACtD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2EAAQ;AAC/B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1EiC;AACI;;;;;;;;;;;;;;;ACD9B;AACP;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,0HAAoB;AAC/D;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;ACjEoC;;;;;;;UCApC;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;WClCA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,IAAI;WACJ;WACA;WACA,IAAI;WACJ;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,CAAC;WACD;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA,sGAAsG;WACtG;WACA;WACA;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA,EAAE;WACF;WACA;;;;;WChEA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WCfA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;;;;;UEHA;UACA","sources":["webpack://dve-testing/./compiled/client/World/Actions/RegisterActions.js","webpack://dve-testing/./compiled/client/World/Gen/Generate.js","webpack://dve-testing/./compiled/client/World/Gen/WorldGen.js","webpack://dve-testing/./compiled/client/World/Player.js","webpack://dve-testing/./compiled/client/World/Session/Session.js","webpack://dve-testing/./compiled/client/World/State/WorldEvent.js","webpack://dve-testing/./compiled/client/World/State/WorldState.js","webpack://dve-testing/./compiled/client/World/world.js","webpack://dve-testing/./compiled/core/data/shared/Functions/RegisterVoxelData.js","webpack://dve-testing/external commonjs \"perf_hooks\"","webpack://dve-testing/../../DSLIBS/crystallineState/dist/StateMachine.js","webpack://dve-testing/../../DSLIBS/crystallineState/dist/StateProxy.js","webpack://dve-testing/../../DSLIBS/crystallineState/dist/index.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Common/Queues/ConstructorQueues.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Common/Tasks/ConstructorTasks.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Common/Threads/Contracts/ConstructorRemoteThreadTasks.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Common/Threads/Contracts/ConstructorTasks.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Data/Constants/DataHeaders.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Global/Util/UtilMap.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Tools/Brush/AdvancedBrushTool.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Tools/Brush/Brush.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Tools/Build/BuilderTool.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Tools/Loader/DataLoaderTool.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Tools/Loader/LoaderRegister.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Tools/Tasks/TasksTool.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Classes/RegisterDataManager.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Classes/TagBuilder.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/DataSync.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Generators/SubstanceDataGenerator.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Generators/VoxelDataGenerator.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Generators/WorldDataGenerator.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Managers/DataManagers.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/TagBuilders/SubstanceTagBuilder.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/TagBuilders/VoxelTagBuilder.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Tags/ChunkTags.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Tags/ColumnTags.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Data/Tags/RegionTags.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/DivineVoxelEngineWorld.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Hooks/Data/WorldDataHooks.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Init/InitWorldWorker.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Lock/WorldLock.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Tasks/WorldTasks.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Threads/WorldThreadState.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/Threads/WorldThreads.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/World/index.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/SetUpPlayerData.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/index.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/World/InitWorldPlayer.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/World/WorldPlayer.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/World/index.js","webpack://dve-testing/./node_modules/simloop/SimulationLoop.js","webpack://dve-testing/./node_modules/simloop/index.js","webpack://dve-testing/webpack/bootstrap","webpack://dve-testing/webpack/runtime/async module","webpack://dve-testing/webpack/runtime/chunk loaded","webpack://dve-testing/webpack/runtime/create fake namespace object","webpack://dve-testing/webpack/runtime/define property getters","webpack://dve-testing/webpack/runtime/ensure chunk","webpack://dve-testing/webpack/runtime/get javascript chunk filename","webpack://dve-testing/webpack/runtime/global","webpack://dve-testing/webpack/runtime/hasOwnProperty shorthand","webpack://dve-testing/webpack/runtime/make namespace object","webpack://dve-testing/webpack/runtime/publicPath","webpack://dve-testing/webpack/runtime/importScripts chunk loading","webpack://dve-testing/webpack/runtime/startup chunk dependencies","webpack://dve-testing/webpack/before-startup","webpack://dve-testing/webpack/startup","webpack://dve-testing/webpack/after-startup"],"sourcesContent":["import { DVEW } from \"divine-voxel-engine/World\";\r\nimport { DVEWorldPlayer } from \"../Player\";\r\nexport function RegisterActions() {\r\n    const physicsData = DVEWorldPlayer.manager.physics;\r\n    const dataTool = DVEW.getDataTool();\r\n    const brush = DVEW.getBrush();\r\n    DVEW.TC.registerTasks(\"place\", async (data) => {\r\n        const [x, y, z] = physicsData.pick.getPlacePosition();\r\n        if (Math.abs(x) == Infinity)\r\n            return;\r\n        if (!dataTool.loadInAt(x, y, z))\r\n            return;\r\n        if (dataTool.isRenderable())\r\n            return;\r\n        await brush.setId(data).setXYZ(x, y, z).paintAndAwaitUpdate();\r\n        DVEW.parentComm.runTasks(\"play-sound\", [\"voxel-place\", data, x, y, z]);\r\n        const raw = brush.getRaw();\r\n    });\r\n    DVEW.TC.registerTasks(\"break\", async () => {\r\n        const [x, y, z] = physicsData.pick.position.getAsArray();\r\n        if (Math.abs(x) == Infinity)\r\n            return;\r\n        if (!dataTool.loadInAt(x, y, z))\r\n            return;\r\n        if (dataTool.isRenderable()) {\r\n            const id = dataTool.getStringId();\r\n            DVEW.parentComm.runTasks(\"play-sound\", [\"voxel-break\", id, x, y, z]);\r\n            await brush.setXYZ(x, y, z).eraseAndAwaitUpdate();\r\n        }\r\n    });\r\n}\r\n","import { DVEW } from \"divine-voxel-engine/World\";\r\nimport { WorldGen } from \"./WorldGen\";\r\nexport async function GenerateWorld() {\r\n    const numChunks = 2;\r\n    let startX = -16 * numChunks;\r\n    let startZ = -16 * numChunks;\r\n    let endX = 16 * numChunks;\r\n    let endZ = 16 * numChunks;\r\n    const builder = DVEW.getBuilder();\r\n    const tasks = DVEW.getTasksTool();\r\n    tasks.setFocalPoint([\"main\", 0, 0, 0]);\r\n    for (let x = startX; x < endX; x += 16) {\r\n        for (let z = startZ; z < endZ; z += 16) {\r\n            WorldGen.generateWorldColumn(x, z);\r\n            tasks.worldSun.queued.add([\"main\", x, 0, z]);\r\n        }\r\n    }\r\n    await tasks.worldSun.queued.runAndAwait();\r\n    for (let x = startX; x < endX; x += 16) {\r\n        for (let z = startZ; z < endZ; z += 16) {\r\n            builder.setXZ(x, z).buildColumn();\r\n        }\r\n    }\r\n}\r\n","import { DVEW } from \"divine-voxel-engine/World\";\r\nconst brush = DVEW.getBrush();\r\nexport const WorldGen = {\r\n    chunkDepth: 16,\r\n    chunkWidth: 16,\r\n    worldHeight: 256,\r\n    minY: 60,\r\n    generateHoleChunk(chunkX, chunkZ) {\r\n        let rx = 0;\r\n        for (let x = chunkX; x < this.chunkWidth + chunkX; x++) {\r\n            let rz = 0;\r\n            for (let z = chunkZ; z < this.chunkDepth + chunkZ; z++) {\r\n                for (let y = 0; y < this.worldHeight; y++) {\r\n                    if (rx == 0 || rz == 0 || rx == 15 || rz == 15) {\r\n                        if (y > this.minY)\r\n                            break;\r\n                        if (y == this.minY) {\r\n                            brush.setId(\"dve_dream_stone\").setXYZ(x, y, z).paint();\r\n                            if (Math.random() > 0.8) {\r\n                                brush\r\n                                    .setId(\"dve_dream_grass\")\r\n                                    .setXYZ(x, y + 1, z)\r\n                                    .paint();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rx == 1 || rz == 1 || rx == 14 || rz == 14) {\r\n                        if (y == this.minY - 1) {\r\n                            brush.setId(\"dve_dream_stone\").setXYZ(x, y, z).paint();\r\n                            if (Math.random() > 0.8) {\r\n                                brush\r\n                                    .setId(\"dve_dream_grass\")\r\n                                    .setXYZ(x, y + 1, z)\r\n                                    .paint();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rx == 2 || rz == 2 || rx == 13 || rz == 13) {\r\n                        if (y == this.minY - 2) {\r\n                            brush.setId(\"dve_dream_stone\").setXYZ(x, y, z).paint();\r\n                            if (Math.random() > 0.8) {\r\n                                brush\r\n                                    .setId(\"dve_dream_grass\")\r\n                                    .setXYZ(x, y + 1, z)\r\n                                    .paint();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rx == 3 || rz == 3 || rx == 12 || rz == 12) {\r\n                        if (y == this.minY - 3) {\r\n                            brush.setId(\"dve_dream_stone\").setXYZ(x, y, z).paint();\r\n                            if (Math.random() > 0.8) {\r\n                                brush\r\n                                    .setId(\"dve_dream_grass\")\r\n                                    .setXYZ(x, y + 1, z)\r\n                                    .paint();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rx == 4 || rz == 4 || rx == 11 || rz == 11) {\r\n                        if (y == this.minY - 4) {\r\n                            brush.setId(\"dve_dream_stone\").setXYZ(x, y, z).paint();\r\n                            if (Math.random() > 0.8) {\r\n                                brush\r\n                                    .setId(\"dve_dream_grass\")\r\n                                    .setXYZ(x, y + 1, z)\r\n                                    .paint();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rx == 5 || rz == 5 || rx == 10 || rz == 10) {\r\n                        if (y == this.minY - 5) {\r\n                            brush.setId(\"dve_dream_stone\").setXYZ(x, y, z).paint();\r\n                            if (Math.random() > 0.8) {\r\n                                brush\r\n                                    .setId(\"dve_dream_grass\")\r\n                                    .setXYZ(x, y + 1, z)\r\n                                    .paint();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rx == 6 || rz == 6 || rx == 9 || rz == 9) {\r\n                        if (y == this.minY - 6) {\r\n                            brush.setId(\"dve_dream_stone\").setXYZ(x, y, z).paint();\r\n                            if (Math.random() > 0.8) {\r\n                                brush\r\n                                    .setId(\"dve_dream_grass\")\r\n                                    .setXYZ(x, y + 1, z)\r\n                                    .paint();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (y < this.minY - 7) {\r\n                        brush.setId(\"dve_dream_stone\").setXYZ(x, y, z).paint();\r\n                        if (Math.random() > 0.8) {\r\n                            brush\r\n                                .setId(\"dve_dream_grass\")\r\n                                .setXYZ(x, y + 1, z)\r\n                                .paint();\r\n                        }\r\n                    }\r\n                }\r\n                rz++;\r\n            }\r\n            rx++;\r\n        }\r\n    },\r\n    generatePondChunk(chunkX, chunkZ) {\r\n        for (let x = chunkX; x < this.chunkWidth + chunkX; x++) {\r\n            for (let z = chunkZ; z < this.chunkDepth + chunkZ; z++) {\r\n                for (let y = 0; y < this.worldHeight; y++) {\r\n                    brush.setXYZ(x, y, z);\r\n                    if (y > this.minY + 1)\r\n                        break;\r\n                    if (x == chunkX ||\r\n                        z == chunkZ ||\r\n                        x == chunkX + this.chunkWidth - 1 ||\r\n                        z == chunkZ + this.chunkDepth - 1) {\r\n                        brush.setId(\"dve_dream_stone\").paint();\r\n                        continue;\r\n                    }\r\n                    if (y < this.minY - 10) {\r\n                        brush.setId(\"dve_dream_stone\").paint();\r\n                    }\r\n                    if (y >= this.minY - 10 && y <= this.minY) {\r\n                        brush.setId(\"dve_liquid_dream_ether\").paint();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    generateNormalChunk(chunkX, chunkZ) {\r\n        for (let x = chunkX; x < this.chunkWidth + chunkX; x++) {\r\n            for (let z = chunkZ; z < this.chunkDepth + chunkZ; z++) {\r\n                for (let y = 0; y < this.worldHeight; y++) {\r\n                    if (y > this.minY + 1)\r\n                        break;\r\n                    if (y <= this.minY) {\r\n                        brush.setId(\"dve_dream_stone\").setXYZ(x, y, z).paint();\r\n                    }\r\n                    if (y == this.minY + 1) {\r\n                        if (Math.random() > 0.8) {\r\n                            brush.setId(\"dve_dream_grass\").setXYZ(x, y, z).paint();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //1376271\r\n    generateRoofChunk(chunkX, chunkZ) {\r\n        for (let x = chunkX; x < this.chunkWidth + chunkX; x++) {\r\n            for (let z = chunkZ; z < this.chunkDepth + chunkZ; z++) {\r\n                for (let y = 0; y < this.minY + 10; y++) {\r\n                    brush.setXYZ(x, y, z);\r\n                    if (y < this.minY - 3) {\r\n                        brush.setId(\"dve_dream_stone\").paint();\r\n                    }\r\n                    if (y == this.minY - 3 && Math.random() > 0.8) {\r\n                        brush.setId(\"dve_dream_grass\").paint();\r\n                    }\r\n                    if (y == this.minY) {\r\n                        brush.setId(\"dve_dream_stone_pillar\").paint();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    generateBoxChunk(chunkX, chunkZ) {\r\n        for (let x = chunkX; x < this.chunkWidth + chunkX; x++) {\r\n            for (let z = chunkZ; z < this.chunkDepth + chunkZ; z++) {\r\n                for (let y = 0; y < this.minY + 10; y++) {\r\n                    brush.setXYZ(x, y, z);\r\n                    if (y < this.minY - 3) {\r\n                        brush.setId(\"dve_dream_stone\").paint();\r\n                    }\r\n                    if (y == this.minY - 3 && Math.random() > 0.8) {\r\n                        brush.setId(\"dve_dream_grass\").paint();\r\n                    }\r\n                    if (y == this.minY) {\r\n                        brush.setId(\"dve_dream_stone_pillar\").paint();\r\n                    }\r\n                    if (y == this.minY + 5) {\r\n                        brush.setId(\"dve_dream_stone_pillar\").paint();\r\n                    }\r\n                    if (y >= this.minY &&\r\n                        y <= this.minY + 5 &&\r\n                        (x == chunkX || x == chunkX + 15 || z == chunkZ || z == chunkZ + 15)) {\r\n                        brush.setId(\"dve_dream_stone_pillar\").paint();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    generateWorldColumn(chunkX, chunkZ) {\r\n        brush.start();\r\n        let toss = Math.random();\r\n        if ((chunkX == 0 && chunkZ == 0) ||\r\n            (chunkX == 0 && chunkZ == -16) ||\r\n            (chunkX == -16 && chunkZ == -0) ||\r\n            (chunkX == -16 && chunkZ == -16)) {\r\n            this.generateRoofChunk(chunkX, chunkZ);\r\n            return;\r\n        }\r\n        //   return this.generatePondChunk(chunkX, chunkZ);\r\n        if (toss < 0.3) {\r\n            this.generateBoxChunk(chunkX, chunkZ);\r\n            return;\r\n        }\r\n        if (toss > 0.6) {\r\n            this.generateHoleChunk(chunkX, chunkZ);\r\n            return;\r\n        }\r\n        let toss2 = Math.random() > 0.5;\r\n        if (toss2)\r\n            this.generateNormalChunk(chunkX, chunkZ);\r\n        if (!toss2)\r\n            this.generatePondChunk(chunkX, chunkZ);\r\n        brush.stop();\r\n    },\r\n};\r\n","export const DVEWorldPlayer = {\r\n    player: {},\r\n    dimension: \"main\",\r\n    manager: {},\r\n    $INIT(player) {\r\n        this.manager = player.manager;\r\n        this.player = player;\r\n    },\r\n};\r\n","import { SimulationLoop } from \"simloop\";\r\nimport { DVEW } from \"divine-voxel-engine/World\";\r\nimport { GenerateWorld } from \"../Gen/Generate.js\";\r\nexport const GameSession = {\r\n    player: {},\r\n    async preLoad() {\r\n        await GenerateWorld();\r\n    },\r\n    startSession() {\r\n        DVEW.nexusComm.runTasks(\"start-world\", [0, 70, 0]);\r\n        SimulationLoop.registerInterval(0);\r\n        SimulationLoop.addToInterval(0, () => {\r\n            this.player.update();\r\n        });\r\n        SimulationLoop.run();\r\n    },\r\n    endSession() { },\r\n};\r\n","import { WORLD_SM } from \"./WorldState\";\r\nimport { DVEW } from \"divine-voxel-engine/World\";\r\nimport { RegisterVoxelData } from \"../../../core/data/shared/Functions/RegisterVoxelData.js\";\r\n//import { $INITWorldPlayer } from \"./Player/WorldPlayer.js\";\r\nimport { INIT_WORLD_PLAYER } from \"dve-plugins-player/World\";\r\nimport { SimulationLoop } from \"simloop\";\r\nimport { GameSession } from \"../Session/Session.js\";\r\nimport { DVEWorldPlayer } from \"../Player.js\";\r\nimport { RegisterActions } from \"../Actions/RegisterActions\";\r\nexport function RegisterWorldEvents() {\r\n    WORLD_SM.addToStates({\r\n        INIT: {\r\n            LOAD: async () => {\r\n                DVEW.TC.registerTasks(\"start-world\", (data, onDone) => {\r\n                    if (!onDone)\r\n                        return;\r\n                    WORLD_SM.triggerEvent(\"IDLE\", \"LOAD_SAVE\", {\r\n                        save: data,\r\n                        onDone: () => {\r\n                            onDone();\r\n                        },\r\n                    });\r\n                }, \"deferred\");\r\n                DVEW.TC.registerTasks(\"end-world\", () => {\r\n                    GameSession.endSession();\r\n                });\r\n                RegisterVoxelData(DVEW);\r\n                await DVEW.$INIT();\r\n                await SimulationLoop.$INIT(20);\r\n                const worldPlayer = await INIT_WORLD_PLAYER(DVEW);\r\n                DVEWorldPlayer.$INIT(worldPlayer);\r\n                GameSession.player = worldPlayer;\r\n                RegisterActions();\r\n                WORLD_SM.triggerEvent(\"INIT\", \"DONE\");\r\n            },\r\n        },\r\n    })\r\n        .addToStates({\r\n        IDLE: {\r\n            LOAD_SAVE: async (args) => {\r\n                WORLD_SM.triggerEvent(\"IN_WORLD\", \"LOADING\", args);\r\n            },\r\n        },\r\n    })\r\n        .addToStates({\r\n        IN_WORLD: {\r\n            LOADING: async (args) => {\r\n                await GameSession.preLoad();\r\n                args.onDone();\r\n                WORLD_SM.triggerEvent(\"IN_WORLD\", \"START\");\r\n            },\r\n        },\r\n    })\r\n        .addToStates({\r\n        IN_WORLD: {\r\n            START: (args) => {\r\n                GameSession.startSession();\r\n            },\r\n        },\r\n    });\r\n}\r\nself.session = GameSession;\r\n","import { CreateMachine } from \"../../../../../../DSLIBS/crystallineState/dist\";\r\nimport { RegisterWorldEvents } from \"./WorldEvent\";\r\nexport const WORLD_SM = CreateMachine({\r\n    INIT: {\r\n        LOAD: {\r\n            goTo: \"INIT\",\r\n        },\r\n        DONE: {\r\n            goTo: \"IDLE\",\r\n        },\r\n    },\r\n    IDLE: {\r\n        LOAD_SAVE: {\r\n            args: { save: \"\", onDone: () => { } },\r\n            goTo: \"IN_WORLD\",\r\n        },\r\n    },\r\n    IN_WORLD: {\r\n        PAUSE: {\r\n            goTo: \"IN_WORLD\",\r\n        },\r\n        EXIT: {\r\n            goTo: \"IDLE\",\r\n        },\r\n        LOADING: {\r\n            args: { save: \"\", onDone: () => { } },\r\n            goTo: \"IN_WORLD\",\r\n        },\r\n        START: {\r\n            goTo: \"INIT\",\r\n        },\r\n    },\r\n});\r\nWORLD_SM.activeState = \"INIT\";\r\nRegisterWorldEvents();\r\n","import { WORLD_SM } from \"./State/WorldState.js\";\r\nawait WORLD_SM.triggerEvent(\"INIT\", \"LOAD\");\r\n","export function RegisterVoxelData(DVEW) {\r\n    DVEW.dataRegister.voxels.registerData([\r\n        //util\r\n        {\r\n            id: \"dve_debug_box\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_is_light_source\", true],\r\n                [\"#dve_light_value\", [15, 15, 15]],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_light_debug\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_data_holder\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_is_rich\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_marker_box\",\r\n            states: 15,\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        //dream\r\n        {\r\n            id: \"dve_dream_stone\",\r\n            states: 1,\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"grassy-stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_stone_pillar\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_grass_block\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_flora\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_lamp\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_is_light_source\", true],\r\n                [\"#dve_light_value\", [15, 0, 15]],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_stone_slab\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_halfbox\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"grassy-stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_log\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"wood\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_stone_stair\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_transparent\"],\r\n                [\"#dve_shape_id\", \"#dve_stair\"],\r\n                [\"#dve_collider_id\", \"#dve_stair\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_grass\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_flora\"],\r\n                [\"#dve_shape_id\", \"#dve_crossed_panels\"],\r\n                [\"#dve_check_collisions\", false],\r\n                [\"#dve_material\", \"grass\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_vine\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_flora\"],\r\n                [\"#dve_shape_id\", \"#dve_panel\"],\r\n                [\"#dve_check_collisions\", false],\r\n                [\"#dve_material\", \"grass\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dream_leaves\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_flora\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"grass\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_liquid_dream_ether\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_liquid\"],\r\n                [\"#dve_shape_id\", \"#dve_liquid\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"water\"],\r\n            ],\r\n        },\r\n        //dread\r\n        {\r\n            id: \"dve_dread_stone\",\r\n            states: 1,\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"grassy-stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dread_grass_block\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_flora\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dread_grass\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_translucent\"],\r\n                [\"#dve_shape_id\", \"#dve_crossed_panels\"],\r\n                [\"#dve_material\", \"grass\"],\r\n                [\"#dve_collider_id\", \"#dve_climable_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dread_lamp\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_is_light_source\", true],\r\n                [\"#dve_light_value\", [15, 0, 0]],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_dread_stone_pillar\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_solid\"],\r\n                [\"#dve_shape_id\", \"#dve_box\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"stone\"],\r\n            ],\r\n        },\r\n        {\r\n            id: \"dve_liquid_dread_ether\",\r\n            tags: [\r\n                [\"#dve_substance\", \"#dve_magma\"],\r\n                [\"#dve_shape_id\", \"#dve_liquid\"],\r\n                [\"#dve_collider_id\", \"#dve_box\"],\r\n                [\"#dve_check_collisions\", true],\r\n                [\"#dve_material\", \"water\"],\r\n                [\"#dve_light_value\", [15, 0, 0]],\r\n                [\"#dve_is_light_source\", true],\r\n            ],\r\n        },\r\n    ]);\r\n}\r\n","module.exports = require(\"perf_hooks\");","export class StateMachine {\n    states;\n    history = [];\n    activeState;\n    stateMachineData = {\n        historyLength: 0,\n        name: \"sup\",\n    };\n    stateData = {};\n    constructor(states) {\n        this.states = states;\n        for (const state in states) {\n            this.stateData[state] = {};\n            const events = states[state];\n            for (const eventKey in events) {\n                this.stateData[state][eventKey] = {\n                    nextState: events[eventKey].goTo,\n                    procedures: [],\n                };\n            }\n        }\n    }\n    isActiveState(state) {\n        return this.activeState == state;\n    }\n    async triggerEvent(state, event, args) {\n        if (!this.states[state]) {\n            throw new Error(`The state ${String(state)} does not exist: machine- ${this.stateMachineData.name}.`);\n        }\n        if (!this.stateData[state][event]) {\n            throw new Error(`The event ${String(event)} does not exist on the state ${String(state)}.: machine-> ${this.stateMachineData.name} data.`);\n        }\n        const procedures = this.stateData[state][event].procedures;\n        for await (const procedure of procedures) {\n            await procedure.func(args);\n        }\n        if (this.stateMachineData.historyLength > 0) {\n            if (this.history.length > this.stateMachineData.historyLength) {\n                this.history.shift();\n            }\n            this.history.push({\n                previousState: this.activeState,\n                newState: state,\n                event: event,\n            });\n        }\n        this.activeState = state;\n        return this;\n    }\n    addToEvent(state, event, func, bind) {\n        if (!this.stateData[state]) {\n            throw new Error(`The state ${String(state)} does not exist: machine- ${this.stateMachineData.name}.`);\n        }\n        if (!this.stateData[state][event]) {\n            throw new Error(`The event ${String(event)} does not exist on the state ${String(state)}.: machine-> ${this.stateMachineData.name} data.`);\n        }\n        this.stateData[state][event].procedures.push({\n            bind: bind,\n            func: func,\n        });\n        return this;\n    }\n    addToStates(data) {\n        for (const state in data) {\n            for (const event in data[state]) {\n                this.addToEvent(state, event, data[state][event]);\n            }\n        }\n        return this;\n    }\n}\n","export const StateProxy = {\n    createProxy(obj) {\n        const events = {};\n        const handler1 = {\n            get(target, prop, receiver) {\n                if (events[prop]) {\n                    events[prop][\"get\"].forEach((_) => _());\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n            set(target, prop, newValue, receiver) {\n                const oldValue = target[prop];\n                target[prop] = newValue;\n                if (events[prop]) {\n                    events[prop][\"set\"].forEach((_) => _(newValue));\n                    if (oldValue != newValue) {\n                        events[prop][\"change\"].forEach((_) => _(oldValue, newValue));\n                    }\n                }\n                return true;\n            },\n        };\n        const update = (property, event, run) => {\n            events[property] ??= {\n                change: [],\n                get: [],\n                set: [],\n            };\n            events[property][event].push(run);\n        };\n        return [update, new Proxy(obj, handler1)];\n    },\n};\n","import { StateProxy } from \"./StateProxy.js\";\nimport { StateMachine } from \"./StateMachine.js\";\nexport function CreateState(data) {\n    return StateProxy.createProxy(data);\n}\nexport function CreateMachine(stateMachineData) {\n    return new StateMachine(stateMachineData);\n}\n","//objects\nimport { CCM } from \"../../World/Threads/WorldThreads.js\";\nimport { ConstructorTasks } from \"../Threads/Contracts/ConstructorTasks.js\";\nconst QMBase = {\n    $INIT() {\n        this.addQueue(\"main\");\n    },\n    _queueMap: new Map(),\n    addQueue(queueKey) {\n        if (this._queueMap.has(queueKey)) {\n            this._queueMap.set(queueKey, Date.now());\n            return false;\n        }\n        this.worldSun.addQueue(queueKey);\n        this.propagation.addQueue(queueKey);\n        this.build.chunk.addQueue(queueKey);\n        this.generate.addQueue(queueKey);\n        this.decorate.addQueue(queueKey);\n        this._queueMap.set(queueKey, Date.now());\n        return true;\n    },\n    removeQueue(queueKey) {\n        if (!this._queueMap.has(queueKey))\n            return false;\n        this.worldSun.removeQueue(queueKey);\n        this.propagation.addQueue(queueKey);\n        this.build.chunk.addQueue(queueKey);\n        this.generate.removeQueue(queueKey);\n        this.decorate.addQueue(queueKey);\n        this._queueMap.delete(queueKey);\n        return true;\n    },\n    /**# Filter Queues\n     * ---\n     * Go through each current queue. IF the passed fucntion returns false it will remove that queue.\n     * @param filter\n     */\n    filterQueues(filter) {\n        this._queueMap.forEach((v, key) => {\n            if (!filter(key)) {\n                this.removeQueue(key);\n            }\n        });\n    },\n    /**# Filter Old Queues\n     * ---\n     * Will remove queues older then 10 minutes.\n     * @param maxTime Max time in miliseconds.\n     */\n    filterOldQueues(maxTime = 600000) {\n        const t = Date.now();\n        this._queueMap.forEach((v, key) => {\n            if (t - v > maxTime) {\n                this.removeQueue(key);\n            }\n        });\n    },\n    worldSun: CCM.addQueue(\"world-sun\", ConstructorTasks.worldSun),\n    propagation: CCM.addQueue(\"propagation\", ConstructorTasks.analyzerPropagation),\n    build: {\n        chunk: CCM.addQueue(\"build-chunk\", ConstructorTasks.buildChunk),\n    },\n    generate: CCM.addQueue(\"generatek\", ConstructorTasks.generate),\n    decorate: CCM.addQueue(\"decorate\", ConstructorTasks.decorate),\n};\nexport const ConstructorQueues = QMBase;\n","import { ConstructorRemoteThreadTasks } from \"../Threads/Contracts/ConstructorRemoteThreadTasks.js\";\nimport { ThreadComm } from \"threadcomm\";\nimport { TaskTool } from \"../../Tools/Tasks/TasksTool.js\";\nconst tasks = new TaskTool();\nexport const ConstructorTasks = {\n    buildChunk: ThreadComm.registerTasks(ConstructorRemoteThreadTasks.buildChunk, (data) => {\n        tasks.setPriority(data.priority);\n        tasks.build.chunk.deferred.run(data.data, () => { });\n    }),\n};\n","export const ConstructorRemoteThreadTasks = {\n    syncShapeMap: -1,\n    addToRebuildQue: 0,\n    runRebuildQue: 1,\n    addToRGBLightUpdateQue: 2,\n    buildChunk: 3\n};\n","export const ConstructorTasks = {\n    buildChunk: 0,\n    buildColumn: 0,\n    generate: 0,\n    decorate: 0,\n    RGBlightUpdate: 0,\n    RGBlightRemove: 0,\n    worldSun: 0,\n    sunLightUpdate: 0,\n    sunLightRemove: 0,\n    analyzerPropagation: 0,\n    analyzerUpdate: 0,\n    flowUpdate: 0,\n    flowRemove: 0,\n    constructEntity: 0,\n    constructItem: 0,\n    explosion: 0,\n    voxelErease: 0,\n    voxelPaint: 0,\n    voxelUpdate: 0,\n};\nlet index = 0;\nfor (const key of Object.keys(ConstructorTasks)) {\n    ConstructorTasks[key] = index;\n    index++;\n}\n","export const DVEMessageHeader = 0xffff;\nexport const WorldDataHeaders = {\n    region: 0,\n    column: 1,\n    chunk: 2,\n};\n","export class UtilMap {\n    _map = new Map();\n    constructor(data) {\n        if (data)\n            this.add(data);\n    }\n    set(id, value) {\n        this._map.set(id, value);\n    }\n    get(id) {\n        if (!this._map.has(id))\n            return undefined;\n        return this._map.get(id);\n    }\n    add(data) {\n        data.forEach(([id, value]) => this._map.set(id, value));\n    }\n    has(id) {\n        return this._map.has(id);\n    }\n    remove(id) {\n        this._map.delete(id);\n    }\n}\n","//util\nimport { Util } from \"../../Global/Util.helper.js\";\n//tools\nimport { BrushTool } from \"./Brush.js\";\nimport { TaskTool } from \"../Tasks/TasksTool.js\";\nconst tasks = new TaskTool();\nexport const GetAdvancedBrushTool = () => {\n    let brush = Util.merge(new BrushTool(), {\n        mode: \"async\",\n        setMode(mode) {\n            this.mode = mode;\n            return this;\n        },\n        paintAndAwaitUpdate() {\n            const self = this;\n            return new Promise((resolve) => {\n                self.paintAndUpdate(() => {\n                    resolve(true);\n                });\n            });\n        },\n        eraseAndAwaitUpdate() {\n            const self = this;\n            return new Promise((resolve) => {\n                self.eraseAndUpdate(() => {\n                    resolve(true);\n                });\n            });\n        },\n        paintAndUpdate(onDone) {\n            tasks.setFocalPoint(brush.location);\n            tasks.voxelUpdate.paint.run(brush.location, brush.getRaw(), () => {\n                if (onDone)\n                    onDone();\n            }, this.mode);\n        },\n        eraseAndUpdate(onDone) {\n            tasks.setFocalPoint(brush.location);\n            tasks.voxelUpdate.erase.run(brush.location, () => {\n                if (onDone)\n                    onDone();\n            }, this.mode);\n        },\n        update(onDone) {\n            tasks.setFocalPoint(brush.location);\n            tasks.voxelUpdate.update.run(brush.location, brush.getRaw(), () => {\n                if (onDone)\n                    onDone();\n            }, this.mode);\n        },\n        updateAndAwait() {\n            return new Promise((resolve) => {\n                this.update(() => {\n                    resolve(true);\n                });\n            });\n        },\n        explode(radius = 6, onDone) {\n            tasks.setFocalPoint(brush.location);\n            tasks.explosion.run(brush.location, radius, () => {\n                if (onDone)\n                    onDone();\n            });\n        },\n        explodeAwaitUpdate(radius = 6) {\n            return new Promise((resolve) => {\n                this.explode(radius, () => {\n                    resolve(true);\n                });\n            });\n        },\n    });\n    return brush;\n};\n","import { DataTool } from \"../../Tools/Data/DataTool.js\";\nimport { WorldPainter } from \"../../Data/World/WorldPainter.js\";\nimport { WorldRegister } from \"../../Data/World/WorldRegister.js\";\nimport { VoxelPaletteReader } from \"../../Data/Voxel/VoxelPalette.js\";\nimport { LocationBoundTool } from \"../Classes/LocationBoundTool.js\";\nexport class BrushTool extends LocationBoundTool {\n    data = {\n        id: \"dve_air\",\n        state: 0,\n        shapeState: 0,\n        secondaryState: 0,\n        secondaryVoxelId: \"dve_air\",\n        level: 0,\n        levelState: 0,\n    };\n    _update = true;\n    _dt = new DataTool();\n    setData(data) {\n        for (const key in data) {\n            if (typeof data[key] !== undefined) {\n                this.data[key] = data[key];\n            }\n        }\n        return this;\n    }\n    setId(id, state = 0, shapeState = 0) {\n        this.data.id = id;\n        this.data.state = state;\n        this.data.shapeState = shapeState;\n        return this;\n    }\n    setDimension(dimensionId) {\n        this.location[0] = dimensionId;\n        this._dt.setDimension(dimensionId);\n        return this;\n    }\n    setSecondaryId(id, state = 0) {\n        this.data.secondaryVoxelId = id;\n        this.data.secondaryState = state;\n        return this;\n    }\n    setState(state) {\n        this.data.state = state;\n        return this;\n    }\n    setShapeState(state) {\n        this.data.shapeState = state;\n        return this;\n    }\n    setLevel(level) {\n        this.data.level = level;\n        return this;\n    }\n    setLevelState(levelState) {\n        this.data.levelState = levelState;\n        return this;\n    }\n    clear() {\n        this.data.id = \"dve_air\";\n        this.data.secondaryVoxelId = \"dve_air\";\n        this.data.level = 0;\n        this.data.levelState = 0;\n        this.data.state = 0;\n        this.data.secondaryState = 0;\n        this.data.shapeState = 0;\n        this.location[1] = 0;\n        this.location[2] = 0;\n        this.location[3] = 0;\n    }\n    setRaw(data) {\n        this._dt.loadInRaw(data);\n        this.data.id = this._dt.getStringId();\n        this.data.shapeState = this._dt.getShapeState();\n        this.data.state = this._dt.getState();\n        this._dt.setSecondary(true);\n        if (this._dt.data.secondaryId >= 2) {\n            this.data.secondaryVoxelId = this._dt.getStringId();\n            this.data.secondaryState = this._dt.getState();\n        }\n        this._dt.setSecondary(false);\n        return this;\n    }\n    getRaw() {\n        this._dt.setId(VoxelPaletteReader.id.getPaletteId(this.data.id, this.data.state));\n        this._dt\n            .setSecondary(true)\n            .setId(VoxelPaletteReader.id.getPaletteId(this.data.secondaryVoxelId, this.data.secondaryState))\n            .setSecondary(false);\n        this._dt.setLevel(this.data.level);\n        this._dt.setLevelState(this.data.levelState);\n        this._dt.setShapeState(this.data.shapeState);\n        this._dt.data.raw[3] == -1 ? (this._dt.data.raw[3] = 0) : false;\n        return this._dt.data.raw;\n    }\n    getData() {\n        return this.data;\n    }\n    paint() {\n        WorldPainter.paint.voxel(this.location, this.data, this._update);\n        return this;\n    }\n    erase() {\n        WorldPainter.paint.erase(this.location);\n        return this;\n    }\n    start() {\n        WorldRegister.cache.enable();\n        return this;\n    }\n    stop() {\n        WorldRegister.cache.disable();\n        return this;\n    }\n}\n","import { WorldRegister } from \"../../Data/World/WorldRegister.js\";\nimport { ChunkDataTool } from \"../Data/WorldData/ChunkDataTool.js\";\nimport { ThreadComm } from \"threadcomm\";\nimport { LocationBoundTool } from \"../../Tools/Classes/LocationBoundTool.js\";\nimport { TaskTool } from \"../../Tools/Tasks/TasksTool.js\";\nconst parentComm = ThreadComm.parent;\nclass BuilderTool extends LocationBoundTool {\n    static _chunkTool = new ChunkDataTool();\n    tasks = new TaskTool();\n    data = {\n        LOD: 1,\n    };\n    setLOD(lod) {\n        this.data.LOD = lod;\n        return this;\n    }\n    clearAll() {\n        parentComm.runTasks(\"clear-all\", []);\n    }\n    buildChunk(runQueue = false) {\n        this.tasks.build.chunk.queued.add(this.location);\n        if (runQueue)\n            this.tasks.build.chunk.queued.run(() => { });\n        return this;\n    }\n    buildColumn(onDone) {\n        this.tasks.build.column.deferred.run(this.location, onDone ? onDone : (data) => { });\n        return this;\n    }\n    removeColumn() {\n        const column = WorldRegister.column.get(this.location);\n        if (!column)\n            return false;\n        if (column.chunks.size == 0)\n            return false;\n        parentComm.runTasks(\"remove-column\", this.location);\n        return this;\n    }\n    fillColumn() {\n        WorldRegister.column.fill(this.location);\n        return this;\n    }\n    removeColumnsOutsideRadius(radius) {\n        parentComm.runTasks(\"remove-column-outside-radius\", [this.location, radius]);\n    }\n}\nexport { BuilderTool };\n","import { RegionHeaderRegister } from \"../../Data/World/Region/RegionHeaderRegister.js\";\nimport { ThreadComm } from \"threadcomm\";\nimport { ColumnDataTool } from \"../Data/WorldData/ColumnDataTool.js\";\nimport { WorldRegister } from \"../../Data/World/WorldRegister.js\";\nimport { LocationBoundTool } from \"../Classes/LocationBoundTool.js\";\nimport { Distance3D } from \"../../Math/Functions/Distance3d.js\";\nimport { EngineSettings } from \"../../Data/Settings/EngineSettings.js\";\nimport { DataHooks } from \"../../Data/DataHooks.js\";\nimport { WorldLock } from \"../../World/Lock/WorldLock.js\";\nimport { LoaderRegister } from \"./LoaderRegister.js\";\nimport { SafeInterval } from \"../../Global/Util/SafeInterval.js\";\nclass DataLoaderTool extends LocationBoundTool {\n    static columnDataTool = new ColumnDataTool();\n    static isEnabled() {\n        const comm = ThreadComm.getComm(\"data-loader\");\n        return Boolean(comm);\n    }\n    mode = \"server\";\n    _enabled = true;\n    dataComm;\n    constructor() {\n        super();\n        const comm = ThreadComm.getComm(\"data-loader\");\n        if (!comm) {\n            this._enabled = false;\n            console.error(\"Data Loader comm must be set.\");\n        }\n        else {\n            if (!comm.isPortSet()) {\n                this._enabled = false;\n                comm.onSetPort(() => (this._enabled = true));\n            }\n        }\n        this.dataComm = comm;\n        this.mode = EngineSettings.settings.data.mode;\n        LoaderRegister.$INIT(this.dataComm);\n        DataHooks.settingsSynced.addToRun((data) => {\n            this.mode = data.data.mode;\n        });\n    }\n    _runTask(id, location, onDone) {\n        this.dataComm.runPromiseTasks(id, location, [], (data) => {\n            onDone ? onDone(data) : false;\n        });\n    }\n    isEnabled() {\n        return this._enabled;\n    }\n    saveRegion(onDone) {\n        const location = this.getLocation();\n        this.dataComm.runPromiseTasks(\"save-region\", location, [], () => onDone ? onDone() : false);\n    }\n    saveRegionAsync() {\n        return new Promise((resolve) => {\n            this.saveRegion(() => {\n                resolve(true);\n            });\n        });\n    }\n    loadRegion(onDone) {\n        const location = this.getLocation();\n        this.dataComm.runPromiseTasks(\"load-region\", location, [], () => onDone ? onDone() : false);\n    }\n    loadRegionAsync() {\n        return new Promise((resolve) => {\n            this.loadRegion(() => {\n                resolve(true);\n            });\n        });\n    }\n    saveColumn(onDone) {\n        const location = this.getLocation();\n        this.dataComm.runPromiseTasks(\"save-column\", location, [], () => onDone ? onDone() : false);\n    }\n    saveColumnIfNotStored(onDone) {\n        const location = this.getLocation();\n        if (!DataLoaderTool.columnDataTool.setLocation(location).loadIn())\n            return onDone ? onDone(false) : false;\n        if (DataLoaderTool.columnDataTool.isStored())\n            return onDone ? onDone(false) : false;\n        this.dataComm.runPromiseTasks(\"save-column\", location, [], () => {\n            if (onDone)\n                onDone(true);\n        });\n        return true;\n    }\n    loadIfExists(onDone) {\n        if (!this._enabled)\n            return onDone ? onDone(true) : false;\n        const location = [...this.getLocation()];\n        this.columnExists((exists) => {\n            if (exists) {\n                this.setLocation(location).loadColumn(() => {\n                    onDone ? onDone(true) : false;\n                });\n                return;\n            }\n            onDone ? onDone(false) : false;\n        });\n    }\n    saveColumnAsync() {\n        return new Promise((resolve) => {\n            this.saveColumn(() => {\n                resolve(true);\n            });\n        });\n    }\n    loadColumn(onDone) {\n        LoaderRegister.addToLoad(this.getLocation(), () => {\n            onDone ? onDone(true) : false;\n        });\n    }\n    loadColumnAsync() {\n        return new Promise((resolve) => {\n            this.loadColumn(() => {\n                resolve(true);\n            });\n        });\n    }\n    unLoadColumn(onDone) {\n        const location = this.getLocation();\n        if (WorldLock.isLocked(location) || !WorldRegister.column.get(location))\n            return onDone ? onDone(false) : false;\n        this.dataComm.runPromiseTasks(\"unload-column\", location, [], () => {\n            onDone ? onDone(true) : false;\n        });\n    }\n    columnExists(onDone) {\n        const location = [...this.getLocation()];\n        if (this.mode == \"server\") {\n            if (!RegionHeaderRegister.get(location)) {\n                this.loadRegionHeader(() => {\n                    this.setLocation(location).columnExists(onDone);\n                });\n                return;\n            }\n            const exists = RegionHeaderRegister.isStored(location);\n            onDone ? onDone(exists >= 1 ? true : false) : false;\n            return;\n        }\n        this.dataComm.runPromiseTasks(\"column-exists\", location, [], (data) => {\n            onDone ? onDone(data) : false;\n        });\n    }\n    loadRegionHeader(onDone) {\n        const location = this.getLocation();\n        this.dataComm.runPromiseTasks(\"load-region-header\", location, [], (data) => {\n            onDone ? onDone(data) : false;\n        });\n    }\n    loadRegionHeaderAsync() {\n        return new Promise((resolve) => {\n            this.loadRegionHeader((anaswer) => {\n                resolve(anaswer);\n            });\n        });\n    }\n    columnExistsAsync() {\n        return new Promise((resolve) => {\n            this.columnExists((anaswer) => {\n                resolve(anaswer);\n            });\n        });\n    }\n    columnTimestamp(onDone) {\n        const location = this.getLocation();\n        this.dataComm.runPromiseTasks(\"column-timestamp\", location, [], (data) => {\n            onDone ? onDone(data) : false;\n        });\n    }\n    columnTimestampAsync() {\n        return new Promise((resolve) => {\n            this.columnTimestamp((timeStamp) => {\n                resolve(timeStamp);\n            });\n        });\n    }\n    unLoadAllOutsideRadius(radius, run = (columntool) => true, onDone) {\n        const [dimension, sx, sy, sz] = this.location;\n        const regions = WorldRegister.dimensions.get(dimension);\n        if (!regions)\n            return;\n        let totalColumns = 0;\n        for (const [key, region] of regions) {\n            for (const [ckey, column] of region.columns) {\n                DataLoaderTool.columnDataTool.setColumn(column);\n                if (DataLoaderTool.columnDataTool.isPersistent())\n                    continue;\n                const [dimension, cx, cy, cz] = DataLoaderTool.columnDataTool.getLocationData();\n                if (!run(DataLoaderTool.columnDataTool))\n                    continue;\n                const d = Distance3D(sx, sy, sz, cx, cy, cz);\n                if (d > radius) {\n                    totalColumns++;\n                    this.setXYZ(cx, cy, cz).unLoadColumn(() => {\n                        totalColumns--;\n                    });\n                }\n            }\n        }\n        const inte = new SafeInterval().setInterval(1).setOnRun(() => {\n            if (totalColumns == 0) {\n                inte.stop();\n                if (onDone)\n                    onDone();\n            }\n        });\n        inte.start();\n    }\n    unLoadAllColumnsAsync() {\n        return new Promise((resolve) => {\n            this.unLoadAllColumns(() => {\n                resolve(true);\n            });\n        });\n    }\n    unLoadAllColumns(onDone) {\n        const [dimension, sx, sy, sz] = this.location;\n        const regions = WorldRegister.dimensions.get(dimension);\n        if (!regions)\n            return;\n        let totalColumns = 0;\n        for (const [key, region] of regions) {\n            for (const [ckey, column] of region.columns) {\n                DataLoaderTool.columnDataTool.setColumn(column);\n                const [dimension, cx, cy, cz] = DataLoaderTool.columnDataTool.getLocationData();\n                totalColumns++;\n                this.setXYZ(cx, cy, cz).unLoadColumn(() => {\n                    totalColumns--;\n                });\n            }\n        }\n        const inte = new SafeInterval().setInterval(1).setOnRun(() => {\n            if (totalColumns == 0) {\n                inte.stop();\n                if (onDone)\n                    onDone();\n            }\n        });\n        inte.start();\n    }\n    allColumns(run) {\n        const [dimension, sx, sy, sz] = this.location;\n        const regions = WorldRegister.dimensions.get(dimension);\n        if (!regions)\n            return;\n        for (const [key, region] of regions) {\n            for (const [ckey, column] of region.columns) {\n                DataLoaderTool.columnDataTool.setColumn(column);\n                run(DataLoaderTool.columnDataTool);\n            }\n        }\n    }\n    getAllUnStoredColumns(run) {\n        const [dimension, sx, sy, sz] = this.location;\n        const regions = WorldRegister.dimensions.get(dimension);\n        if (!regions)\n            return;\n        for (const [key, region] of regions) {\n            for (const [ckey, column] of region.columns) {\n                DataLoaderTool.columnDataTool.setColumn(column);\n                if (DataLoaderTool.columnDataTool.isStored())\n                    continue;\n                const [dimension, cx, cy, cz] = DataLoaderTool.columnDataTool.getLocationData();\n                run(dimension, cx, cy, cz);\n            }\n        }\n    }\n}\nexport { DataLoaderTool };\n","import { UtilMap } from \"../../Global/Util/UtilMap.js\";\nexport const LoaderRegister = {\n    load: new UtilMap(),\n    dataComm: {},\n    $INIT(dataComm) {\n        this.dataComm = dataComm;\n    },\n    addToLoad(location, run) {\n        const key = location.toString();\n        let load = this.load.get(key);\n        if (load)\n            return load.push(run);\n        const newL = [...location];\n        load = [];\n        this.load.set(key, load);\n        load.push(run);\n        this.dataComm.runPromiseTasks(\"load-column\", newL, [], (data) => {\n            this.runLoad(newL, data);\n        });\n    },\n    runLoad(location, data) {\n        const key = location.toString();\n        const run = this.load.get(key);\n        if (!run)\n            return false;\n        run.forEach((_) => _(data));\n        this.load.remove(key);\n    },\n};\n","import { ConstructorQueues as CQ } from \"../../Common/Queues/ConstructorQueues.js\";\nimport { ThreadComm } from \"threadcomm\";\nimport { WorldRegister } from \"../../Data/World/WorldRegister.js\";\nimport { CCM } from \"../../World/Threads/WorldThreads.js\";\nimport { ConstructorTasks } from \"../../Common/Threads/Contracts/ConstructorTasks.js\";\nimport { WorldSpaces } from \"../../Data/World/WorldSpaces.js\";\nexport class TaskTool {\n    _data = {\n        dimension: \"main\",\n        queue: \"main\",\n    };\n    _thread = \"\";\n    _priority = 0;\n    constructor() {\n        this._thread = ThreadComm.threadName;\n    }\n    setPriority(priority) {\n        this._priority = priority;\n        return this;\n    }\n    setFocalPoint(location) {\n        const [dimesnion, x, y, z] = location;\n        const queueKey = `${dimesnion}-${WorldSpaces.region.getKeyXYZ(x, y, z)}`;\n        CQ.addQueue(queueKey);\n        this._data.queue = queueKey;\n        this._thread = ThreadComm.threadName;\n        return this;\n    }\n    voxelUpdate = {\n        update: {\n            run: (location, raw, onDone, mode = \"sync\") => {\n                CCM.runPromiseTasks(ConstructorTasks.voxelUpdate, [location, raw, this._data.queue, this._thread], [], onDone, mode == \"sync\" ? 0 : undefined);\n            },\n        },\n        erase: {\n            run: (location, onDone, mode = \"sync\") => {\n                CCM.runPromiseTasks(ConstructorTasks.voxelErease, [location, this._data.queue, this._thread], [], onDone, mode == \"sync\" ? 0 : undefined);\n            },\n        },\n        paint: {\n            run: (location, raw, onDone, mode = \"sync\") => {\n                CCM.runPromiseTasks(ConstructorTasks.voxelPaint, [location, raw, this._data.queue, this._thread], [], onDone, mode == \"sync\" ? 0 : undefined);\n            },\n        },\n    };\n    build = {\n        chunk: {\n            deferred: {\n                run: (buildTasks, onDone) => {\n                    CCM.runPromiseTasks(ConstructorTasks.buildChunk, {\n                        data: buildTasks,\n                        priority: this._priority,\n                    }, [], onDone, undefined, 0);\n                },\n            },\n            queued: {\n                add: (location) => {\n                    CQ.build.chunk.add({\n                        data: [location, 1],\n                        priority: this._priority,\n                    }, this._data.queue);\n                },\n                run: (onDone) => {\n                    CQ.build.chunk.run(this._data.queue);\n                    CQ.build.chunk.onDone(this._data.queue, onDone);\n                },\n                runAndAwait: async () => {\n                    await CQ.build.chunk.runAndAwait(this._data.queue);\n                },\n            },\n        },\n        column: {\n            queued: {},\n            deferred: {\n                run: (location, onDone) => {\n                    CCM.runPromiseTasks(ConstructorTasks.buildColumn, [location, 1], [], onDone, undefined, 0);\n                },\n            },\n        },\n    };\n    explosion = {\n        run: (location, radius, onDone) => {\n            CCM.runPromiseTasks(ConstructorTasks.explosion, [location, radius, \"\", \"\"], [], onDone, undefined, 0);\n        },\n    };\n    anaylzer = {\n        update: {\n            run: (location, onDone) => {\n                CCM.runPromiseTasks(ConstructorTasks.analyzerUpdate, [location, this._data.queue, this._thread], [], onDone, undefined, 0);\n            },\n        },\n    };\n    propagation = {\n        deferred: {\n            run: (location, onDone) => {\n                CCM.runPromiseTasks(ConstructorTasks.analyzerPropagation, [location, this._data.queue, this._thread], [], onDone, undefined, 0);\n            },\n        },\n        queued: {\n            add: (location) => {\n                CQ.propagation.add([location, this._data.queue, this._thread], this._data.queue);\n            },\n            run: (onDone) => {\n                CQ.propagation.run(this._data.queue);\n                CQ.propagation.onDone(this._data.queue, onDone);\n            },\n            runAndAwait: async () => {\n                await CQ.propagation.runAndAwait(this._data.queue);\n            },\n        },\n    };\n    generate = {\n        deferred: {\n            run(location, data, onDone) {\n                CCM.runPromiseTasks(ConstructorTasks.generate, [location, data], [], onDone, undefined, 0);\n            },\n        },\n        queued: {\n            add: (data) => {\n                CQ.generate.add(data, this._data.queue);\n            },\n            run: (onDone) => {\n                CQ.generate.run(this._data.queue);\n                CQ.generate.onDone(this._data.queue, onDone);\n            },\n            runAndAwait: async () => {\n                await CQ.generate.runAndAwait(this._data.queue);\n            },\n        },\n    };\n    decorate = {\n        deferred: {\n            run: (location, data, onDone) => {\n                CCM.runPromiseTasks(ConstructorTasks.decorate, [location, data], [], onDone, undefined, 0);\n            },\n        },\n        queued: {\n            add: async (data) => {\n                CQ.decorate.add(data, this._data.queue);\n            },\n            run: (onDone) => {\n                CQ.decorate.run(this._data.queue);\n                CQ.decorate.onDone(this._data.queue, onDone);\n            },\n            runAndAwait: async () => {\n                await CQ.decorate.runAndAwait(this._data.queue);\n            },\n        },\n    };\n    worldSun = {\n        deferred: {\n            run: (location, onDone) => {\n                CCM.runPromiseTasks(ConstructorTasks.worldSun, [location, this._thread], [], onDone, undefined, 0);\n            },\n        },\n        queued: {\n            add: (location) => {\n                CQ.worldSun.add([location, this._data.queue, this._thread], this._data.queue);\n                WorldRegister.column.fill(location);\n            },\n            run: (onDone) => {\n                CQ.worldSun.run(this._data.queue);\n                CQ.worldSun.onDone(this._data.queue, onDone);\n            },\n            runAndAwait: async () => {\n                await CQ.worldSun.runAndAwait(this._data.queue);\n            },\n        },\n    };\n}\n","export class RegisterDataManager {\n    data = new Map();\n    getData(id) {\n        const voxelData = this.data.get(id);\n        if (!voxelData) {\n            throw new Error(`Voxel with ${id} does not exists.`);\n        }\n        return voxelData;\n    }\n    registerData(data) {\n        if (Array.isArray(data)) {\n            for (const voxel of data) {\n                this.data.set(voxel.id, voxel);\n            }\n            return;\n        }\n        this.data.set(data.id, data);\n    }\n    clear() {\n        this.data.clear();\n    }\n}\n","import { TagManager } from \"divine-binary-tags\";\nimport { DataSync } from \"../DataSync.js\";\nimport { MappedDataRegister } from \"../../../Data/Register/MappedDataRegister.js\";\nexport class TagBuilder {\n    id;\n    dataSegment;\n    _built = false;\n    _nodeMap = new Map();\n    _stringMaps = new Map();\n    _objectMaps = new Map();\n    _defaults = new Map();\n    _initData;\n    constructor(id, dataSegment) {\n        this.id = id;\n        this.dataSegment = dataSegment;\n    }\n    addNode(node) {\n        if (Array.isArray(node)) {\n            for (const n of node) {\n                this._nodeMap.set(n.id, n);\n            }\n            return;\n        }\n        this._nodeMap.set(node.id, node);\n    }\n    getNode(id) {\n        return this._nodeMap.get(id);\n    }\n    setDefaults(tagManager) {\n        for (const [key, node] of this._nodeMap) {\n            const defaultValue = this._defaults.get(key);\n            if (!defaultValue)\n                continue;\n            tagManager.setTag(key, Number(defaultValue));\n        }\n    }\n    hasNode(id) {\n        return this._nodeMap.has(id);\n    }\n    setNode(id, value, tagManager) {\n        const node = this.getNode(id);\n        if (!node)\n            return;\n        if (node.type == \"number\") {\n            tagManager.setTag(node.id, Number(value));\n        }\n        if (node.type == \"boolean\") {\n            tagManager.setTag(node.id, Number(value));\n        }\n        if (node.type == \"number-array\") {\n            if (!Array.isArray(value))\n                return false;\n            let i = value.length;\n            while (i--) {\n                tagManager.setArrayTagValue(node.id, i, value[i]);\n            }\n        }\n        if (node.type == \"string-map\") {\n            const data = this._stringMaps.get(node.id);\n            if (!data)\n                return false;\n            const v = String(value).trim();\n            if (data.found[v] === undefined) {\n                data.map.push(v);\n                data.found[v] = data.count;\n                data.count++;\n            }\n            tagManager.setTag(node.id, data.found[v]);\n        }\n        if (node.type == \"object-map\") {\n            const data = this._objectMaps.get(node.id);\n            if (!data)\n                return false;\n            const v = JSON.stringify(value);\n            if (data.found[v] === undefined) {\n                data.map[data.count] = value;\n                data.found[v] = data.count;\n                data.count++;\n            }\n            tagManager.setTag(node.id, data.found[v]);\n        }\n    }\n    build(totalTagIndexes = 0) {\n        if (this._built)\n            return this._initData;\n        const tags = new TagManager(this.id);\n        for (const [key, node] of this._nodeMap) {\n            if (node.type == \"number\") {\n                tags.registerTag({\n                    id: node.id,\n                    type: \"typed-number\",\n                    numberType: node.numberType,\n                });\n                this._defaults.set(node.id, node.default);\n                continue;\n            }\n            if (node.type == \"number-array\") {\n                tags.registerTag({\n                    id: node.id,\n                    type: \"typed-number-array\",\n                    numberType: node.numberType,\n                    length: node.length,\n                });\n                continue;\n            }\n            if (node.type == \"boolean\") {\n                tags.registerTag({\n                    id: node.id,\n                    type: \"boolean\",\n                });\n                this._defaults.set(node.id, node.default ? 1 : 0);\n            }\n            if (node.type == \"string-map\") {\n                tags.registerTag({\n                    id: node.id,\n                    type: \"typed-number\",\n                    numberType: \"16ui\",\n                });\n                this._stringMaps.set(node.id, {\n                    count: 0,\n                    found: {},\n                    map: [],\n                    allowedComms: node.allowedComms,\n                });\n            }\n            if (node.type == \"object-map\") {\n                tags.registerTag({\n                    id: node.id,\n                    type: \"typed-number\",\n                    numberType: \"16ui\",\n                });\n                this._objectMaps.set(node.id, {\n                    count: 0,\n                    found: {},\n                    map: {},\n                    allowedComms: node.allowedComms,\n                });\n            }\n        }\n        tags.$INIT({\n            indexBufferMode: \"shared\",\n            numberOfIndexes: totalTagIndexes,\n        });\n        this._initData = tags.initData;\n        return this._initData;\n    }\n    sync() {\n        for (const [key, map] of this._stringMaps) {\n            const data = [this.dataSegment, key, map.map];\n            if (map.allowedComms.includes(\"world\")) {\n                MappedDataRegister.stringMaps.sync(data);\n            }\n            DataSync.loopThroughComms((comm) => {\n                if (comm.name == \"world\")\n                    return;\n                if (map.allowedComms.includes(comm.name)) {\n                    DataSync.maps.strings.syncInThread(comm.name, data);\n                }\n            });\n        }\n        for (const [key, map] of this._objectMaps) {\n            const data = [this.dataSegment, key, map.map];\n            if (map.allowedComms.includes(\"world\")) {\n                MappedDataRegister.objectMaps.sync(data);\n            }\n            DataSync.loopThroughComms((comm) => {\n                if (comm.name == \"world\")\n                    return;\n                if (map.allowedComms.includes(comm.name)) {\n                    DataSync.maps.objects.syncInThread(comm.name, data);\n                }\n            });\n        }\n    }\n}\n","//objects\nimport { VoxelDataGenerator } from \"./Generators/VoxelDataGenerator.js\";\nimport { WorldRegister } from \"../../Data/World/WorldRegister.js\";\nimport { DataSyncIds } from \"../../Common/Threads/Contracts/DataSyncIds.js\";\nimport { ChunkDataTags, InitalizeChunkTags } from \"./Tags/ChunkTags.js\";\nimport { ColumnDataTags, InitalizeColumnTags } from \"./Tags/ColumnTags.js\";\nimport { InitalizeRegionTags, RegionDataTags, RegionHeaderTagManager, } from \"./Tags/RegionTags.js\";\nimport { VoxelTags } from \"../../Data/Voxel/VoxelTags.js\";\nimport { RegionHeaderRegister } from \"../../Data/World/Region/RegionHeaderRegister.js\";\nimport { DimensionsRegister } from \"../../Data/World/Dimensions/DimensionsRegister.js\";\nimport { VoxelTagBuilder } from \"./TagBuilders/VoxelTagBuilder.js\";\nimport { SubstanceDataGenerator } from \"./Generators/SubstanceDataGenerator.js\";\nimport { SubstanceTags } from \"../../Data/Substance/SubstanceTags.js\";\nimport { SubstanceTagBuilder } from \"./TagBuilders/SubstanceTagBuilder.js\";\nclass DataSyncNode {\n    data;\n    constructor(data) {\n        this.data = data;\n    }\n    unSync(input) {\n        const output = this.data.getUnSyncData(input);\n        if (!output)\n            return false;\n        DataSync.loopThroughComms((comm, options) => {\n            if (!this.data.commCheck(options))\n                return false;\n            comm.unSyncData(this.data.dataSyncType, output);\n        });\n    }\n    unSyncInThread(commName, input) {\n        const comm = DataSync.commMap.get(commName);\n        if (!comm)\n            return;\n        const output = this.data.getUnSyncData(input);\n        if (!output)\n            return false;\n        if (!this.data.commCheck(DataSync.commOptions.get(comm)))\n            return false;\n        comm.unSyncData(this.data.dataSyncType, output);\n    }\n    sync(input) {\n        const output = this.data.getSyncData(input);\n        if (!output)\n            return false;\n        DataSync.loopThroughComms((comm, options) => {\n            if (!this.data.commCheck(options))\n                return false;\n            comm.syncData(this.data.dataSyncType, output);\n        });\n    }\n    syncInThread(commName, input) {\n        const comm = DataSync.commMap.get(commName);\n        if (!comm)\n            return;\n        const output = this.data.getSyncData(input);\n        if (!output)\n            return false;\n        if (!this.data.commCheck(DataSync.commOptions.get(comm)))\n            return false;\n        comm.syncData(this.data.dataSyncType, output);\n    }\n}\nexport const DataSync = {\n    commMap: new Map(),\n    comms: [],\n    commOptions: new WeakMap(),\n    _ready: false,\n    $INIT() {\n        this.loopThroughComms((comm) => {\n            this.commMap.set(comm.name, comm);\n        });\n        VoxelDataGenerator.$generate();\n        VoxelTagBuilder.sync();\n        SubstanceDataGenerator.$generate();\n        SubstanceTagBuilder.sync();\n        InitalizeChunkTags();\n        InitalizeColumnTags();\n        InitalizeRegionTags();\n        this.palettes.voxel.sync();\n        this.palettes.substance.sync();\n        this.tags.voxel.sync();\n        this.tags.substance.sync();\n        this.tags.chunk.sync();\n        this.tags.column.sync();\n        this.tags.region.sync();\n        this._ready = true;\n    },\n    isReady() {\n        return this._ready;\n    },\n    registerComm(comm, data = {}) {\n        this.comms.push(comm);\n        this.commOptions.set(comm, {\n            worldData: data.worldData !== undefined ? data.worldData : true,\n            voxelPalette: data.voxelPalette !== undefined ? data.voxelPalette : true,\n            voxelTags: data.voxelTags !== undefined ? data.voxelTags : true,\n            materials: data.materials !== undefined ? data.materials : false,\n            colliders: data.colliders !== undefined ? data.colliders : false,\n            worldDataTags: data.worldDataTags !== undefined ? data.worldDataTags : true,\n        });\n    },\n    loopThroughComms(func) {\n        for (const comm of DataSync.comms) {\n            const options = this.commOptions.get(comm);\n            if (!comm.isReady())\n                continue;\n            func(comm, options);\n        }\n    },\n    worldData: {\n        dimesnion: new DataSyncNode({\n            dataSyncType: DataSyncIds.dimesnion,\n            commCheck: (options) => options.worldData,\n            getSyncData: (input) => {\n                const dimensionData = DimensionsRegister.getDimension(input);\n                if (!dimensionData)\n                    return false;\n                return dimensionData;\n            },\n            getUnSyncData: () => true,\n        }),\n        chunk: new DataSyncNode({\n            dataSyncType: DataSyncIds.chunk,\n            commCheck: (options) => options.worldData,\n            getSyncData: (input) => {\n                const chunk = WorldRegister.chunk.get(input);\n                if (!chunk)\n                    return false;\n                return [input, chunk.buffer];\n            },\n            getUnSyncData: (input) => input,\n        }),\n        column: new DataSyncNode({\n            dataSyncType: DataSyncIds.column,\n            commCheck: (options) => options.worldData,\n            getSyncData: (input) => {\n                const column = WorldRegister.column.get(input);\n                if (!column)\n                    return false;\n                return [input, column.buffer];\n            },\n            getUnSyncData: (input) => input,\n        }),\n        region: new DataSyncNode({\n            dataSyncType: DataSyncIds.region,\n            commCheck: (options) => options.worldData,\n            getSyncData: (input) => {\n                const region = WorldRegister.region.get(input);\n                if (!region)\n                    return false;\n                return [input, region.buffer];\n            },\n            getUnSyncData: (input) => input,\n        }),\n        regionHeader: new DataSyncNode({\n            dataSyncType: DataSyncIds.regionHeader,\n            commCheck: (options) => options.worldData,\n            getSyncData: (input) => {\n                const regionHeader = RegionHeaderRegister.get(input);\n                if (!regionHeader)\n                    return false;\n                return [input, regionHeader.buffer];\n            },\n            getUnSyncData: () => true,\n        }),\n    },\n    tags: {\n        voxel: new DataSyncNode({\n            dataSyncType: DataSyncIds.voxelTags,\n            commCheck: (options) => options.voxelTags,\n            getSyncData: () => [\n                VoxelTags.initData,\n                VoxelTags.voxelIndex.buffer,\n            ],\n            getUnSyncData: () => false,\n        }),\n        substance: new DataSyncNode({\n            dataSyncType: DataSyncIds.substanceTags,\n            commCheck: (options) => options.voxelTags,\n            getSyncData: () => SubstanceTags.initData,\n            getUnSyncData: () => false,\n        }),\n        chunk: new DataSyncNode({\n            dataSyncType: DataSyncIds.chunkTags,\n            commCheck: (options) => options.worldDataTags,\n            getSyncData: () => ChunkDataTags.initData,\n            getUnSyncData: () => false,\n        }),\n        column: new DataSyncNode({\n            dataSyncType: DataSyncIds.columnTags,\n            commCheck: (options) => options.worldDataTags,\n            getSyncData: () => ColumnDataTags.initData,\n            getUnSyncData: () => false,\n        }),\n        region: new DataSyncNode({\n            dataSyncType: DataSyncIds.regionTags,\n            commCheck: (options) => options.worldDataTags,\n            getSyncData: () => [\n                RegionDataTags.initData,\n                RegionHeaderTagManager.initData,\n            ],\n            getUnSyncData: () => false,\n        }),\n    },\n    palettes: {\n        voxel: new DataSyncNode({\n            dataSyncType: DataSyncIds.voxelPalette,\n            commCheck: (options) => options.worldDataTags,\n            getSyncData: () => [\n                VoxelDataGenerator.palette._palette,\n                VoxelDataGenerator.palette._map,\n            ],\n            getUnSyncData: () => false,\n        }),\n        substance: new DataSyncNode({\n            dataSyncType: DataSyncIds.substancePalette,\n            commCheck: (options) => options.worldDataTags,\n            getSyncData: () => [\n                SubstanceDataGenerator.palette._palette,\n                SubstanceDataGenerator.palette._map,\n            ],\n            getUnSyncData: () => false,\n        }),\n    },\n    maps: {\n        strings: new DataSyncNode({\n            dataSyncType: DataSyncIds.registerStringMap,\n            commCheck: () => true,\n            getSyncData: (data) => data,\n            getUnSyncData: () => false,\n        }),\n        objects: new DataSyncNode({\n            dataSyncType: DataSyncIds.registerObjectMap,\n            commCheck: () => true,\n            getSyncData: (data) => data,\n            getUnSyncData: () => false,\n        }),\n    },\n};\n","import { SubstancePaletteReader } from \"../../../Data/Substance/SubstancePalette.js\";\nimport { DVEW } from \"../../DivineVoxelEngineWorld.js\";\nimport { SubstanceTagBuilder } from \"../TagBuilders/SubstanceTagBuilder.js\";\nimport { SubstanceTags } from \"../../../Data/Substance/SubstanceTags.js\";\nexport const SubstanceDataGenerator = {\n    $generate() {\n        //build palette\n        for (const [key, voxel] of DVEW.dataRegister.substances.data) {\n            this.palette.register(voxel);\n        }\n        SubstancePaletteReader.setPalette(this.palette._palette, this.palette._map);\n        //create data buffer\n        const initData = SubstanceTagBuilder.build(DVEW.dataRegister.substances.data.size);\n        const buffer = new SharedArrayBuffer(initData.bufferSize);\n        initData.buffer = buffer;\n        SubstanceTags.$INIT(initData);\n        SubstanceTags.setBuffer(buffer);\n        //build data\n        for (const [key, substance] of DVEW.dataRegister.substances.data) {\n            const substanceID = SubstancePaletteReader.id.numberFromString(key);\n            if (typeof substanceID == undefined)\n                continue;\n            SubstanceTags.setTagIndex(substanceID);\n            SubstanceTagBuilder.setDefaults(SubstanceTags);\n            for (const tag of substance.tags) {\n                const [id, value] = tag;\n                if (!SubstanceTagBuilder.hasNode(id))\n                    continue;\n                SubstanceTagBuilder.setNode(id, value, SubstanceTags);\n            }\n        }\n        DVEW.data.tags.substances.$INIT(initData);\n    },\n    palette: {\n        _count: 0,\n        _palette: [],\n        _map: {},\n        register(sustance) {\n            this._palette[this._count] = sustance.id;\n            this._map[sustance.id] = this._count;\n            this._count++;\n        },\n        get() {\n            return this._palette;\n        },\n        getMap() {\n            return this._map;\n        },\n    },\n};\n","//objects\nimport { DVEW } from \"../../DivineVoxelEngineWorld.js\";\nimport { VoxelPaletteReader } from \"../../../Data/Voxel/VoxelPalette.js\";\nimport { VoxelTagBuilder } from \"../TagBuilders/VoxelTagBuilder.js\";\nimport { VoxelTags } from \"../../../Data/Voxel/VoxelTags.js\";\nimport { VoxelTagIDs } from \"../../../Data/Constants/Tags/VoxelTagIds.js\";\nimport { LightData } from \"../../../Data/Light/LightByte.js\";\nexport const VoxelDataGenerator = {\n    $generate() {\n        //build palette\n        for (const [key, voxel] of DVEW.dataRegister.voxels.data) {\n            this.palette.registerVoxel(voxel);\n        }\n        VoxelPaletteReader.setVoxelPalette(this.palette._palette, this.palette._map);\n        //build index\n        const indexBuffer = new SharedArrayBuffer(this.palette._count * 2);\n        const voxelIndex = new Uint16Array(indexBuffer);\n        let currentCount = 0;\n        let currentParent = 0;\n        for (let i = 2; i < this.palette._count; i++) {\n            let newParent = VoxelPaletteReader.id.baseNumeric(i);\n            if (newParent != currentParent) {\n                currentParent = newParent;\n                voxelIndex[i] = currentCount;\n                currentCount++;\n            }\n        }\n        //create data buffer\n        const initData = VoxelTagBuilder.build(DVEW.dataRegister.voxels.data.size);\n        const buffer = new SharedArrayBuffer(initData.bufferSize);\n        initData.buffer = buffer;\n        VoxelTags.$INIT(initData);\n        VoxelTags.setBuffer(buffer);\n        //build data\n        for (const [key, voxel] of DVEW.dataRegister.voxels.data) {\n            const baseID = VoxelPaletteReader.id.numberFromString(key);\n            if (!baseID)\n                continue;\n            VoxelTags.setTagIndex(voxelIndex[baseID]);\n            VoxelTagBuilder.setDefaults(VoxelTags);\n            for (const tag of voxel.tags) {\n                const [id, value] = tag;\n                if (!VoxelTagBuilder.hasNode(id))\n                    continue;\n                if (id == VoxelTagIDs.lightValue) {\n                    const v = value;\n                    let sl = 0;\n                    sl = LightData.setR(v[0], sl);\n                    sl = LightData.setG(v[1], sl);\n                    sl = LightData.setB(v[2], sl);\n                    VoxelTags.setTag(VoxelTagIDs.lightValue, sl);\n                    continue;\n                }\n                VoxelTagBuilder.setNode(id, value, VoxelTags);\n            }\n        }\n        DVEW.data.tags.voxels.sync(voxelIndex);\n        DVEW.data.tags.voxels.$INIT(initData);\n    },\n    palette: {\n        _count: 2,\n        _palette: [\"dve_air\", \"dve_barrier\"],\n        _map: {\n            dve_air: 0,\n            dve_barrier: 1,\n        },\n        registerVoxel(voxel) {\n            this._palette[this._count] = voxel.id;\n            this._map[voxel.id] = this._count;\n            if (voxel.states) {\n                for (let i = this._count; i <= this._count + voxel.states; i++) {\n                    this._palette[i] = voxel.id;\n                }\n                this._count += voxel.states;\n            }\n            this._count++;\n        },\n        get() {\n            return this._palette;\n        },\n        getMap() {\n            return this._map;\n        },\n    },\n};\n","import { Util } from \"../../../Global/Util.helper.js\";\nimport { DVEMessageHeader, WorldDataHeaders, } from \"../../../Data/Constants/DataHeaders.js\";\nimport { ChunkDataTags } from \"../Tags/ChunkTags.js\";\nimport { ColumnDataTags } from \"../Tags/ColumnTags.js\";\nimport { RegionDataTags } from \"../Tags/RegionTags.js\";\nexport const WorldDataGenerator = {\n    chunk: {\n        create(buffer = false) {\n            if (buffer) {\n                return Util.convertBufferToSAB(buffer);\n            }\n            const newBuffer = new SharedArrayBuffer(ChunkDataTags.tagSize);\n            ChunkDataTags.setBuffer(newBuffer);\n            ChunkDataTags.setTag(\"#dve_header\", DVEMessageHeader);\n            ChunkDataTags.setTag(\"#dve_data_type\", WorldDataHeaders.chunk);\n            return newBuffer;\n        },\n    },\n    column: {\n        create(buffer = false) {\n            if (buffer) {\n                return Util.convertBufferToSAB(buffer);\n            }\n            const newBuffer = new SharedArrayBuffer(ColumnDataTags.tagSize);\n            ColumnDataTags.setBuffer(newBuffer);\n            ColumnDataTags.setTag(\"#dve_header\", DVEMessageHeader);\n            ColumnDataTags.setTag(\"#dve_data_type\", WorldDataHeaders.column);\n            return newBuffer;\n        },\n    },\n    region: {\n        create(buffer = false) {\n            if (buffer) {\n                return Util.convertBufferToSAB(buffer);\n            }\n            const newBuffer = new SharedArrayBuffer(RegionDataTags.tagSize);\n            RegionDataTags.setBuffer(newBuffer);\n            RegionDataTags.setTag(\"#dve_header\", DVEMessageHeader);\n            RegionDataTags.setTag(\"#dve_data_type\", WorldDataHeaders.region);\n            return newBuffer;\n        },\n    },\n};\n","import { RegisterDataManager } from \"../Classes/RegisterDataManager.js\";\nexport const VoxelManager = new RegisterDataManager();\nexport const SubstanceManager = new RegisterDataManager();\nSubstanceManager.registerData([\n    {\n        id: \"#dve_solid\",\n        tags: [\n            [\"#dve_parent_substance\", \"#dve_solid\"],\n            [\"#dve_rendered_substance\", \"#dve_solid\"],\n            [\"#dve_is_solid\", true],\n            [\"#dve_is_liquid\", false],\n            [\"#dve_flow_rate\", 0],\n            [\"#dve_culled_substances\", [\"#dve_solid\"]],\n        ],\n    },\n    {\n        id: \"#dve_translucent\",\n        tags: [\n            [\"#dve_parent_substance\", \"#dve_flora\"],\n            [\"#dve_rendered_substance\", \"#dve_solid\"],\n            [\"#dve_is_solid\", true],\n            [\"#dve_is_liquid\", false],\n            [\"#dve_flow_rate\", 0],\n            [\"#dve_culled_substances\", []],\n        ],\n    },\n    {\n        id: \"#dve_transparent\",\n        tags: [\n            [\"#dve_parent_substance\", \"#dve_solid\"],\n            [\"#dve_rendered_substance\", \"#dve_solid\"],\n            [\"#dve_is_solid\", true],\n            [\"#dve_is_liquid\", false],\n            [\"#dve_flow_rate\", 0],\n            [\"#dve_culled_substances\", [\"#dve_transparent\"]],\n        ],\n    },\n    {\n        id: \"#dve_flora\",\n        tags: [\n            [\"#dve_parent_substance\", \"#dve_flora\"],\n            [\"#dve_rendered_substance\", \"#dve_flora\"],\n            [\"#dve_is_solid\", true],\n            [\"#dve_is_liquid\", false],\n            [\"#dve_flow_rate\", 0],\n            [\"#dve_culled_substances\", []],\n        ],\n    },\n    {\n        id: \"#dve_liquid\",\n        tags: [\n            [\"#dve_parent_substance\", \"#dve_liquid\"],\n            [\"#dve_rendered_substance\", \"#dve_liquid\"],\n            [\"#dve_is_solid\", false],\n            [\"#dve_is_liquid\", true],\n            [\"#dve_flow_rate\", 1],\n            [\"#dve_culled_substances\", [\"#dve_liquid\", \"#dve_solid\"]],\n        ],\n    },\n    {\n        id: \"#dve_magma\",\n        tags: [\n            [\"#dve_parent_substance\", \"#dve_liquid\"],\n            [\"#dve_rendered_substance\", \"#dve_liquid\"],\n            [\"#dve_is_solid\", false],\n            [\"#dve_is_liquid\", true],\n            [\"#dve_flow_rate\", 3],\n            [\"#dve_culled_substances\", [\"#dve_liquid\", \"#dve_solid\"]],\n        ],\n    },\n]);\n","import { SubstanceTagIds } from \"../../../Data/Constants/Tags/SubstanceTagIds.js\";\nimport { TagBuilder } from \"../Classes/TagBuilder.js\";\nexport const SubstanceTagBuilder = new TagBuilder(\"substance-tag-manager\", \"substance\");\nSubstanceTagBuilder.addNode([\n    {\n        id: SubstanceTagIds.parent,\n        type: \"string-map\",\n        allowedComms: [\"constructor\", \"nexus\", \"fx\", \"world\", \"render\"],\n    },\n    {\n        id: SubstanceTagIds.rendered,\n        type: \"string-map\",\n        allowedComms: [\"constructor\", \"nexus\", \"fx\", \"world\", \"render\"],\n    },\n    {\n        id: SubstanceTagIds.culledSubstnaces,\n        type: \"object-map\",\n        allowedComms: [\"constructor\"],\n    },\n    {\n        id: SubstanceTagIds.isSolid,\n        type: \"boolean\",\n        default: false,\n    },\n    {\n        id: SubstanceTagIds.isLiquid,\n        type: \"boolean\",\n        default: false,\n    },\n    {\n        id: SubstanceTagIds.flowRate,\n        type: \"number\",\n        numberType: \"32f\",\n        default: 1,\n    },\n]);\n","import { VoxelTagIDs } from \"../../../Data/Constants/Tags/VoxelTagIds.js\";\nimport { TagBuilder } from \"../Classes/TagBuilder.js\";\nexport const VoxelTagBuilder = new TagBuilder(\"voxel-tag-manager\", \"voxel\");\nVoxelTagBuilder.addNode([\n    {\n        id: VoxelTagIDs.substance,\n        type: \"string-map\",\n        allowedComms: [\"constructor\", \"nexus\", \"fx\", \"world\", \"render\"],\n    },\n    {\n        id: VoxelTagIDs.shapeID,\n        type: \"string-map\",\n        allowedComms: [\"constructor\"],\n    },\n    {\n        id: VoxelTagIDs.colliderID,\n        type: \"string-map\",\n        allowedComms: [\"nexus\"],\n    },\n    {\n        id: VoxelTagIDs.checkCollisions,\n        type: \"boolean\",\n        default: false,\n    },\n    {\n        id: VoxelTagIDs.material,\n        type: \"string-map\",\n        allowedComms: [\"nexus\"],\n    },\n    {\n        id: VoxelTagIDs.isLightSource,\n        type: \"boolean\",\n        default: false,\n    },\n    {\n        id: VoxelTagIDs.lightValue,\n        type: \"number\",\n        numberType: \"16ui\",\n        default: 0,\n    },\n    {\n        id: VoxelTagIDs.isRich,\n        type: \"boolean\",\n        default: false,\n    },\n    {\n        id: VoxelTagIDs.hardness,\n        type: \"number\",\n        numberType: \"32ui\",\n        default: 0,\n    },\n]);\n","import { ChunkTags } from \"../../../Data/World/Chunk/ChunkTags.js\";\nimport { TagManager } from \"divine-binary-tags\";\nimport { WorldSpaces } from \"../../../Data/World/WorldSpaces.js\";\nimport { WorldDataTagIDs } from \"../../../Data/Constants/Tags/WorldDataTagIds.js\";\nimport { ChunkTagIDs } from \"../../../Data/Constants/Tags/ChunkTagIds.js\";\nexport const ChunkDataTags = new TagManager(\"chunk-tags\");\nChunkDataTags.registerTag({\n    id: WorldDataTagIDs.header,\n    type: \"header\",\n    numberType: \"16ui\",\n});\nChunkDataTags.registerTag({\n    id: WorldDataTagIDs.dataType,\n    type: \"header\",\n    numberType: \"16ui\",\n});\nChunkDataTags.registerTag({\n    id: WorldDataTagIDs.dimensionId,\n    type: \"typed-number\",\n    numberType: \"16ui\",\n});\nChunkDataTags.registerTag({\n    id: WorldDataTagIDs.positionX,\n    type: \"typed-number\",\n    numberType: \"32i\",\n});\nChunkDataTags.registerTag({\n    id: WorldDataTagIDs.positionY,\n    type: \"typed-number\",\n    numberType: \"32i\",\n});\nChunkDataTags.registerTag({\n    id: WorldDataTagIDs.positionZ,\n    type: \"typed-number\",\n    numberType: \"32i\",\n});\nChunkDataTags.registerTag({\n    id: ChunkTagIDs.minHeight,\n    type: \"typed-number\",\n    numberType: \"8ui\",\n});\nChunkDataTags.registerTag({\n    id: ChunkTagIDs.maxHeight,\n    type: \"typed-number\",\n    numberType: \"8ui\",\n});\nexport function InitalizeChunkTags() {\n    ChunkDataTags.registerTag({\n        id: ChunkTagIDs.heightMap,\n        type: \"bit-array\",\n        length: WorldSpaces.chunk.getHeight(),\n    });\n    ChunkDataTags.registerTag({\n        id: ChunkTagIDs.dirtyMap,\n        type: \"bit-array\",\n        length: WorldSpaces.chunk.getHeight(),\n    });\n    ChunkDataTags.registerTag({\n        id: ChunkTagIDs.voxelIDSegment,\n        type: \"typed-number-array\",\n        numberType: \"16ui\",\n        length: WorldSpaces.chunk.getVolume(),\n    });\n    ChunkDataTags.registerTag({\n        id: ChunkTagIDs.voxelLightSegment,\n        type: \"typed-number-array\",\n        numberType: \"16ui\",\n        length: WorldSpaces.chunk.getVolume(),\n    });\n    ChunkDataTags.registerTag({\n        id: ChunkTagIDs.voxelStateSegment,\n        type: \"typed-number-array\",\n        numberType: \"16ui\",\n        length: WorldSpaces.chunk.getVolume(),\n    });\n    ChunkDataTags.registerTag({\n        id: ChunkTagIDs.voxelSecondaryIDSegment,\n        type: \"typed-number-array\",\n        numberType: \"16ui\",\n        length: WorldSpaces.chunk.getVolume(),\n    });\n    const initData = ChunkDataTags.$INIT({\n        indexBufferMode: \"shared\",\n    });\n    ChunkTags.$INIT(initData);\n}\n","import { TagManager } from \"divine-binary-tags\";\nimport { ColumnTags } from \"../../../Data/World/Column/ColumnTags.js\";\nimport { WorldDataTagIDs } from \"../../../Data/Constants/Tags/WorldDataTagIds.js\";\nexport const ColumnDataTags = new TagManager(\"column-tags\");\nColumnDataTags.registerTag({\n    id: WorldDataTagIDs.header,\n    type: \"header\",\n    numberType: \"16ui\",\n});\nColumnDataTags.registerTag({\n    id: WorldDataTagIDs.dataType,\n    type: \"header\",\n    numberType: \"16ui\",\n});\nColumnDataTags.registerTag({\n    id: WorldDataTagIDs.dimensionId,\n    type: \"typed-number\",\n    numberType: \"16ui\",\n});\nColumnDataTags.registerTag({\n    id: WorldDataTagIDs.positionX,\n    type: \"typed-number\",\n    numberType: \"32i\",\n});\nColumnDataTags.registerTag({\n    id: WorldDataTagIDs.positionY,\n    type: \"typed-number\",\n    numberType: \"32i\",\n});\nColumnDataTags.registerTag({\n    id: WorldDataTagIDs.positionZ,\n    type: \"typed-number\",\n    numberType: \"32i\",\n});\nColumnDataTags.registerTag({\n    id: \"#dve_last_save_timestamp\",\n    type: \"typed-number\",\n    numberType: \"32ui\",\n});\nColumnDataTags.registerTag({\n    id: \"#dve_last_analyzer_update_timestamp\",\n    type: \"typed-number\",\n    numberType: \"32ui\",\n});\nColumnDataTags.registerTag({\n    id: \"#dve_has_rich_data\",\n    type: \"boolean\",\n});\nColumnDataTags.registerTag({\n    id: \"#dve_has_entity_data\",\n    type: \"boolean\",\n});\nColumnDataTags.registerTag({\n    id: \"#dve_is_stored\",\n    type: \"boolean\",\n});\nColumnDataTags.registerTag({\n    id: \"#dve_is_world_gen_done\",\n    type: \"boolean\",\n});\nColumnDataTags.registerTag({\n    id: \"#dve_is_world_decor_done\",\n    type: \"boolean\",\n});\nColumnDataTags.registerTag({\n    id: \"#dve_is_world_sun_done\",\n    type: \"boolean\",\n});\nColumnDataTags.registerTag({\n    id: \"#dve_is_world_propagation_done\",\n    type: \"boolean\",\n});\nColumnDataTags.registerTag({\n    id: \"#dve_is_dirty\",\n    type: \"boolean\",\n});\nColumnDataTags.registerTag({\n    id: \"#dve_persistent\",\n    type: \"boolean\",\n});\nexport function InitalizeColumnTags() {\n    const initData = ColumnDataTags.$INIT({\n        indexBufferMode: \"shared\",\n    });\n    ColumnTags.$INIT(initData);\n}\n","import { WorldSpaces } from \"../../../Data/World/WorldSpaces.js\";\nimport { RegionHeaderTags, RegionTags } from \"../../../Data/World/Region/RegionTags.js\";\nimport { TagManager } from \"divine-binary-tags\";\nimport { WorldDataTagIDs } from \"../../../Data/Constants/Tags/WorldDataTagIds.js\";\nexport const RegionDataTags = new TagManager(\"region-tags\");\nRegionDataTags.registerTag({\n    id: WorldDataTagIDs.header,\n    type: \"header\",\n    numberType: \"16ui\",\n});\nRegionDataTags.registerTag({\n    id: WorldDataTagIDs.dataType,\n    type: \"header\",\n    numberType: \"16ui\",\n});\nRegionDataTags.registerTag({\n    id: \"#dve_total_players\",\n    type: \"typed-number\",\n    numberType: \"16ui\",\n});\nRegionDataTags.registerTag({\n    id: WorldDataTagIDs.dimensionId,\n    type: \"typed-number\",\n    numberType: \"16ui\",\n});\nRegionDataTags.registerTag({\n    id: WorldDataTagIDs.positionX,\n    type: \"typed-number\",\n    numberType: \"32i\",\n});\nRegionDataTags.registerTag({\n    id: WorldDataTagIDs.positionY,\n    type: \"typed-number\",\n    numberType: \"32i\",\n});\nRegionDataTags.registerTag({\n    id: WorldDataTagIDs.positionZ,\n    type: \"typed-number\",\n    numberType: \"32i\",\n});\nexport const RegionHeaderTagManager = new TagManager(\"region-header-tags\");\nexport function InitalizeRegionTags() {\n    const initData = RegionDataTags.$INIT({\n        indexBufferMode: \"shared\",\n    });\n    RegionTags.$INIT(initData);\n    RegionHeaderTagManager.registerTag({\n        id: \"#dved-column-sector-index\",\n        type: \"typed-number-array\",\n        numberType: \"16ui\",\n        length: WorldSpaces.region.getColumnVolume(),\n    });\n    RegionHeaderTagManager.registerTag({\n        id: \"#dved-column-legnth-index\",\n        type: \"typed-number-array\",\n        numberType: \"16ui\",\n        length: WorldSpaces.region.getColumnVolume(),\n    });\n    RegionHeaderTagManager.registerTag({\n        id: \"#dved-column-save-timestamp\",\n        type: \"typed-number-array\",\n        numberType: \"32ui\",\n        length: WorldSpaces.region.getColumnVolume(),\n    });\n    const headerInitData = RegionHeaderTagManager.$INIT({\n        indexBufferMode: \"shared\",\n    });\n    RegionHeaderTags.$INIT(headerInitData);\n}\n","//threads\nimport { ParentComm, NexusComm, RichWorldComm, DataComm, FXComm, CCM, } from \"./Threads/WorldThreads.js\";\n//queues\nimport { ConstructorQueues } from \"../Common/Queues/ConstructorQueues.js\";\n//tasks\nimport { ConstructorTasks } from \"../Common/Tasks/ConstructorTasks.js\";\n//objects\nimport { EngineSettings } from \"../Data/Settings/EngineSettings.js\";\nimport { Util } from \"../Global/Util.helper.js\";\n//data\nimport { DataSync } from \"./Data/DataSync.js\";\nimport { DataManager } from \"../Data/DataManager.js\";\nimport { SubstanceManager, VoxelManager, } from \"./Data/Managers/DataManagers.js\";\nimport { WorldDataGenerator } from \"./Data/Generators/WorldDataGenerator.js\";\n//tags\nimport { VoxelTagBuilder } from \"./Data/TagBuilders/VoxelTagBuilder.js\";\n//tools\nimport { BuilderTool } from \"../Tools/Build/BuilderTool.js\";\nimport { GetAdvancedBrushTool } from \"../Tools/Brush/AdvancedBrushTool.js\";\nimport { ChunkDataTool } from \"../Tools/Data/WorldData/ChunkDataTool.js\";\nimport { ColumnDataTool } from \"../Tools/Data/WorldData/ColumnDataTool.js\";\nimport { DataTool } from \"../Tools/Data/DataTool.js\";\nimport { TaskTool } from \"../Tools/Tasks/TasksTool.js\";\nimport { HeightMapTool } from \"../Tools/Data/WorldData/HeightMapTool.js\";\nimport { RegionDataTool } from \"../Tools/Data/WorldData/RegionDataTool.js\";\nimport { DataLoaderTool } from \"../Tools/Loader/DataLoaderTool.js\";\n//functions\nimport { InitWorldWorker } from \"./Init/InitWorldWorker.js\";\nimport { ThreadComm } from \"threadcomm\";\nimport { ChunkDataTags } from \"./Data/Tags/ChunkTags.js\";\nimport { WorldTasks } from \"./Tasks/WorldTasks.js\";\nimport { RichDataTool } from \"../Tools/Data/RichDataTool.js\";\nimport { SubstanceTagBuilder } from \"./Data/TagBuilders/SubstanceTagBuilder.js\";\n/**# Divine Voxel Engine World\n * ---\n * This handles everything in the world worker context.\n */\nexport const DVEW = {\n    environment: \"browser\",\n    TC: ThreadComm,\n    UTIL: Util,\n    settings: EngineSettings,\n    worldTasks: WorldTasks,\n    generators: {\n        worldData: WorldDataGenerator,\n    },\n    data: DataManager,\n    dataSync: DataSync,\n    fxComm: FXComm,\n    dataComm: DataComm,\n    nexusComm: NexusComm,\n    parentComm: ParentComm,\n    ccm: CCM,\n    richWorldComm: RichWorldComm,\n    cQueues: ConstructorQueues,\n    cTasks: ConstructorTasks,\n    dataRegister: {\n        voxels: VoxelManager,\n        substances: SubstanceManager,\n    },\n    tags: {\n        voxels: VoxelTagBuilder,\n        substances: SubstanceTagBuilder,\n        chunks: ChunkDataTags,\n    },\n    async $INIT() {\n        await InitWorldWorker(this);\n    },\n    getAllTools() {\n        return {\n            brush: this.getBrush(),\n            builder: this.getBuilder(),\n            data: this.getDataTool(),\n            chunkData: this.getChunkDataTool(),\n            columnData: this.getColumnDataTool(),\n            regonData: this.getRegionTool(),\n            heightMap: this.getHeightMapTool(),\n            tasks: this.getTasksTool(),\n        };\n    },\n    getBrush() {\n        return GetAdvancedBrushTool();\n    },\n    getBuilder() {\n        return new BuilderTool();\n    },\n    getDataTool() {\n        return new DataTool();\n    },\n    getRegionTool() {\n        return new RegionDataTool();\n    },\n    getChunkDataTool() {\n        return new ChunkDataTool();\n    },\n    getColumnDataTool() {\n        return new ColumnDataTool();\n    },\n    getHeightMapTool() {\n        return new HeightMapTool();\n    },\n    getTasksTool() {\n        return new TaskTool();\n    },\n    getDataLoaderTool() {\n        return new DataLoaderTool();\n    },\n    getRichDataTool() {\n        return new RichDataTool();\n    },\n};\nDVEW.environment = Util.getEnviorment();\nDVEW.TC.threadName = \"world\";\n","import { DataHooks } from \"../../../Data/DataHooks.js\";\nimport { WorldDataGenerator } from \"../../Data/Generators/WorldDataGenerator.js\";\nimport { DataSync } from \"../../Data/DataSync.js\";\nimport { DVEW } from \"../../DivineVoxelEngineWorld.js\";\nexport const RegisterDataHooks = () => {\n    const tasks = DVEW.getTasksTool();\n    let dataLoaderTool = null;\n    if (DVEW.settings.saveWorldData()) {\n        dataLoaderTool = DVEW.getDataLoaderTool();\n    }\n    /*\n   [chunks]\n   */\n    DataHooks.chunk.onGetAsync.addToRun(async () => WorldDataGenerator.chunk.create());\n    DataHooks.chunk.onGetSync.addToRun(() => WorldDataGenerator.chunk.create());\n    DataHooks.chunk.onNew.addToRun(async (data) => {\n        DataSync.worldData.chunk.sync(data);\n    });\n    DataHooks.chunk.onRemove.addToRun((data) => {\n        if (!dataLoaderTool) {\n            DataSync.worldData.chunk.unSync(data);\n            return;\n        }\n        dataLoaderTool.setLocation(data).saveColumn(() => {\n            DataSync.worldData.chunk.unSync(data);\n        });\n    });\n    /*\n   [columns]\n   */\n    DataHooks.column.onGetAsync.addToRun(async () => WorldDataGenerator.column.create());\n    DataHooks.column.onGetSync.addToRun(() => WorldDataGenerator.column.create());\n    DataHooks.column.onNew.addToRun(async (data) => DataSync.worldData.column.sync(data));\n    DataHooks.column.onRemove.addToRun((data) => {\n        if (!dataLoaderTool) {\n            DataSync.worldData.column.unSync(data);\n            return;\n        }\n        dataLoaderTool.setLocation(data).saveColumn(() => {\n            DataSync.worldData.column.unSync(data);\n        });\n    });\n    /*\n   [region]\n   */\n    DataHooks.region.onGetAsync.addToRun(async () => WorldDataGenerator.region.create());\n    DataHooks.region.onGetSync.addToRun(() => WorldDataGenerator.region.create());\n    DataHooks.region.onNew.addToRun(async (data) => {\n        DataSync.worldData.region.sync(data);\n    });\n    DataHooks.region.onRemove.addToRun((data) => {\n        if (!dataLoaderTool) {\n            DataSync.worldData.region.unSync(data);\n            return;\n        }\n        dataLoaderTool.setLocation(data).saveRegion(() => {\n            DataSync.worldData.region.unSync(data);\n        });\n    });\n    /*\n   [paint]\n   */\n    DataHooks.paint.onRichVoxelPaint.addToRun((data) => {\n        // DVEW.richWorldComm.setInitalData(data);\n    });\n    /*\n   [dimensions]\n   */\n    DataHooks.dimension.onRegisterDimension.addToRun((data) => {\n        DVEW.cQueues.addQueue(data.id);\n        DataSync.worldData.dimesnion.sync(data.id);\n    });\n};\n","import { ThreadComm } from \"threadcomm\";\nimport { RegisterDataHooks } from \"../Hooks/Data/WorldDataHooks.js\";\nimport { WorldThreadState } from \"../Threads/WorldThreadState.js\";\nimport { DataSync } from \"../Data/DataSync.js\";\nimport { WorldLock } from \"../Lock/WorldLock.js\";\nimport { DataLoaderTool } from \"../../Tools/Loader/DataLoaderTool.js\";\nexport function InitWorldWorker(DVEW) {\n    return new Promise(async (resolve) => {\n        let parent = \"render\";\n        if (DVEW.environment == \"node\") {\n            parent = \"server\";\n        }\n        await ThreadComm.$INIT(\"world\", parent);\n        RegisterDataHooks();\n        await DVEW.UTIL.createPromiseCheck({\n            check: () => {\n                return WorldThreadState.isReady();\n            },\n            checkInterval: 1,\n        });\n        ThreadComm.registerTasks(\"sync-all-data\", async () => {\n            DataSync.$INIT();\n            await DVEW.ccm.__comms.map((comm) => comm.waitTillTasksExist(\"ready\"));\n            await Promise.all(DVEW.ccm.__comms.map((comm) => new Promise((resolve) => {\n                comm.runPromiseTasks(\"ready\", [], [], () => {\n                    resolve(true);\n                });\n            })));\n            resolve(true);\n        });\n        WorldLock.$INIT(new DataLoaderTool());\n    });\n}\n","import { WorldRegister } from \"../../Data/World/WorldRegister.js\";\nimport { WorldSpaces } from \"../../Data/World/WorldSpaces.js\";\nimport { UtilMap } from \"../../Global/Util/UtilMap.js\";\nimport { SafeInterval } from \"../../Global/Util/SafeInterval.js\";\nexport const WorldLock = {\n    locks: new UtilMap(),\n    dataLoader: {},\n    $INIT(dataLoaderTool) {\n        this.dataLoader = dataLoaderTool;\n    },\n    _loadMap: new UtilMap(),\n    addLock(data) {\n        return new Promise((resolve) => {\n            this.locks.add([[data.toString(), data]]);\n            const [dim, [ssx, ssy, ssz], [esx, esy, esz]] = data;\n            const [a, sx, sy, sz] = WorldSpaces.column.getLocationXYZ(ssx, ssy, ssz);\n            const [b, ex, ey, ez] = WorldSpaces.column.getLocationXYZ(esx, esy, esz);\n            const run = () => {\n                let allFound = true;\n                for (let y = sy; y < ey; y += WorldSpaces.column._bounds.y) {\n                    for (let x = sx; x < ex; x += WorldSpaces.column._bounds.x) {\n                        for (let z = sz; z < ez; z += WorldSpaces.column._bounds.z) {\n                            const location = [\n                                ...WorldSpaces.column.getLocationXYZ(x, y, z),\n                            ];\n                            location[0] = dim;\n                            if (WorldRegister.column.get(location))\n                                continue;\n                            allFound = false;\n                            if (!this.dataLoader.isEnabled()) {\n                                WorldRegister.column.fill(location);\n                                continue;\n                            }\n                            const key = location.toString();\n                            if (this._loadMap.has(key))\n                                continue;\n                            this._loadMap.set(key, true);\n                            this.dataLoader.setLocation(location).loadIfExists((loaded) => {\n                                this._loadMap.remove(key);\n                                if (WorldRegister.column.get(location))\n                                    return;\n                                if (!loaded) {\n                                    WorldRegister.column.fill(location);\n                                }\n                            });\n                        }\n                    }\n                }\n                return allFound;\n            };\n            if (run())\n                return resolve(true);\n            const inte = new SafeInterval().setInterval(100).setOnRun(() => {\n                if (run()) {\n                    inte.stop();\n                    resolve(true);\n                }\n            });\n            inte.start();\n        });\n    },\n    removeLock(data) {\n        this.locks.remove(data.toString());\n    },\n    isLocked([sdim, x, y, z]) {\n        let locked = false;\n        for (const [key, [dim, [sx, sy, sz], [ex, ey, ez]]] of this.locks._map) {\n            if (dim != sdim)\n                continue;\n            if (x >= sx && y >= sy && z >= sz && x <= ex && y <= ey && z <= ez)\n                continue;\n            locked = true;\n            break;\n        }\n        return locked;\n    },\n};\n","import { ThreadComm } from \"threadcomm\";\n//data\nimport { WorldRegister } from \"../../Data/World/WorldRegister.js\";\nimport { WorldDataGenerator } from \"../Data/Generators/WorldDataGenerator.js\";\nimport { DataSync } from \"../Data/DataSync.js\";\nimport { RegionDataTool } from \"../../Tools/Data/WorldData/RegionDataTool.js\";\nimport { ColumnDataTool } from \"../../Tools/Data/WorldData/ColumnDataTool.js\";\nimport { ChunkDataTool } from \"../../Tools/Data/WorldData/ChunkDataTool.js\";\nimport { RegionHeaderRegister } from \"../../Data/World/Region/RegionHeaderRegister.js\";\nimport { DataLoaderTool } from \"../../Tools/Loader/DataLoaderTool.js\";\nimport { WorldSpaces } from \"../../Data/World/WorldSpaces.js\";\nimport { BuilderTool } from \"../../Tools/Build/BuilderTool.js\";\nimport { WorldLock } from \"../Lock/WorldLock.js\";\nconst regionTool = new RegionDataTool();\nconst columnTool = new ColumnDataTool();\nconst chunkTool = new ChunkDataTool();\nconst dataLoaderTool = new DataLoaderTool();\nconst builderTool = new BuilderTool();\nconst loadInMap = new Map();\nexport const WorldTasks = {\n    addChunk: ThreadComm.registerTasks(\"add-chunk\", (location) => {\n        const chunk = WorldRegister.chunk.get(location);\n        if (chunk) {\n            DataSync.worldData.chunk.sync(location);\n            return;\n        }\n        if (dataLoaderTool.isEnabled()) {\n            WorldSpaces.column.getPositionLocation(location);\n            const columnLocation = [...WorldSpaces.column.getLocation()];\n            if (loadInMap.has(columnLocation.toString()))\n                return;\n            loadInMap.set(columnLocation.toString(), true);\n            dataLoaderTool.setLocation(columnLocation).loadIfExists((success) => {\n                loadInMap.delete(columnLocation.toString());\n                if (!success) {\n                    builderTool.setLocation(columnLocation).fillColumn();\n                }\n            });\n            return;\n        }\n        if (!chunk) {\n            WorldRegister.chunk.add(location, WorldDataGenerator.chunk.create());\n        }\n    }),\n    worldAlloc: ThreadComm.registerTasks(\"world-alloc\", async (data, onDone) => {\n        await WorldLock.addLock(data);\n        if (onDone)\n            onDone();\n    }, \"deferred\"),\n    worldDealloc: ThreadComm.registerTasks(\"world-dealloc\", async (data, onDone) => {\n        await WorldLock.removeLock(data);\n        if (onDone)\n            onDone();\n    }, \"deferred\"),\n    unLoad: {\n        unLoadColumn: ThreadComm.registerTasks(\"unload-column\", (data, onDone) => {\n            if (WorldLock.isLocked(data))\n                return onDone ? onDone(false) : 0;\n            DataSync.worldData.column.unSync(data);\n            WorldRegister.column.remove(data);\n            const region = WorldRegister.region.get(data);\n            if (region && region.columns.size == 0) {\n                WorldRegister.region.remove(data);\n                DataSync.worldData.region.unSync(data);\n            }\n            return onDone ? onDone(true) : 0;\n        }, \"deferred\"),\n    },\n    load: {\n        loadRegino: ThreadComm.registerTasks(\"load-region\", ([location, sab]) => {\n            regionTool.setBuffer(sab);\n            const sl = regionTool.getLocationData();\n            sl[0] = location[0];\n            WorldRegister.region.add(sl, sab);\n            DataSync.worldData.region.sync(sl);\n        }),\n        loadReginoHeader: ThreadComm.registerTasks(\"load-region-header\", (data) => {\n            RegionHeaderRegister.add(data[0], data[1]);\n            const location = data[0];\n            DataSync.worldData.regionHeader.sync(location);\n        }),\n        loadColumn: ThreadComm.registerTasks(\"load-column\", ([location, sab]) => {\n            columnTool.setBuffer(sab);\n            const sl = columnTool.getLocationData();\n            sl[0] = location[0];\n            WorldRegister.column.add(sl, sab);\n            DataSync.worldData.column.sync(sl);\n        }),\n        loadChunk: ThreadComm.registerTasks(\"load-chunk\", ([location, sab]) => {\n            chunkTool.setBuffer(sab);\n            const sl = chunkTool.getLocationData();\n            sl[0] = location[0];\n            WorldRegister.chunk.add(sl, sab);\n            DataSync.worldData.chunk.sync(sl);\n        }),\n    },\n};\n","export const WorldThreadState = {\n    _settingsSynced: false,\n    isReady() {\n        return this._settingsSynced;\n    },\n};\n","import { DataSync } from \"../Data/DataSync.js\";\nimport { ThreadComm } from \"threadcomm/\";\nimport { EngineSettings } from \"../../Data/Settings/EngineSettings.js\";\nimport { WorldThreadState } from \"./WorldThreadState.js\";\nimport { DataHooks } from \"../../Data/DataHooks.js\";\nexport const CCM = ThreadComm.createCommManager({\n    name: \"constructor\",\n    onPortSet(port, commName) { },\n});\nDataSync.registerComm(CCM);\nexport const DataComm = ThreadComm.createComm(\"data-loader\", {});\nDataSync.registerComm(DataComm);\nexport const FXComm = ThreadComm.createComm(\"fx\");\nDataSync.registerComm(FXComm);\nexport const NexusComm = ThreadComm.createComm(\"nexus\");\nDataSync.registerComm(NexusComm, {\n    materials: true,\n    colliders: true,\n});\nexport const RichWorldComm = ThreadComm.createComm(\"rich-world\");\nDataSync.registerComm(RichWorldComm);\nexport const ParentComm = ThreadComm.parent;\nDataSync.registerComm(ParentComm);\nThreadComm.registerTasks(\"sync-settings\", (settings) => {\n    EngineSettings.syncSettings(settings);\n    WorldThreadState._settingsSynced = true;\n    DataHooks.settingsSynced.run(settings);\n});\n","export * from \"./DivineVoxelEngineWorld.js\";\n","import { PlayerManager, PlayerPhysicsData, PlayerStatsData, } from \"../Data/index.js\";\nexport async function SetUpPlayerData(DVE) {\n    let playerDataReady = false;\n    DVE.TC.registerTasks(\"connect-player-tags\", (data) => {\n        PlayerManager.physics = new PlayerPhysicsData(data[0], data[1]);\n        PlayerManager.stats = new PlayerStatsData(data[2], data[3]);\n        playerDataReady = true;\n    });\n    await DVE.UTIL.createPromiseCheck({\n        check: () => {\n            return playerDataReady;\n        },\n        checkInterval: 1,\n    });\n}\n","export * from \"./PlayerManager.js\";\nexport * from \"./PlayerPhysicsData.js\";\nexport * from \"./PlayerStatsData.js\";\nexport * from \"./RegisterPlayerData.js\";\n","import { SetUpPlayerData } from \"../Data/SetUpPlayerData.js\";\nimport { PlayerManager } from \"../Data/index.js\";\nimport { WorldPlayer } from \"./WorldPlayer.js\";\nexport const INIT_WORLD_PLAYER = async (DVEW) => {\n    await SetUpPlayerData(DVEW);\n    return new WorldPlayer(DVEW, PlayerManager);\n};\n","import { VisitAll } from \"divine-voxel-engine/Math/index.js\";\nexport class WorldPlayer {\n    DVEW;\n    manager;\n    start = {\n        x: 0,\n        y: 0,\n        z: 0,\n    };\n    end = {\n        x: 0,\n        y: 0,\n        z: 0,\n    };\n    reachDistance = 10;\n    dataTool;\n    constructor(DVEW, manager) {\n        this.DVEW = DVEW;\n        this.manager = manager;\n        this.dataTool = DVEW.getDataTool();\n    }\n    hooks = {\n        onVoxelPickCheck: {\n            _funcs: [],\n            add(run) {\n                this._funcs.push(run);\n            },\n            run(data) {\n                let add = true;\n                this._funcs.forEach((_) => {\n                    add = _(data);\n                });\n                return add;\n            },\n        },\n    };\n    update() {\n        this.start.x = this.manager.physics.position.x;\n        this.start.y =\n            this.manager.physics.position.y + this.manager.physics.eyeLevel;\n        this.start.z = this.manager.physics.position.z;\n        this.end.x =\n            this.manager.physics.direction.x * this.reachDistance + this.start.x;\n        this.end.y =\n            this.manager.physics.direction.y * this.reachDistance + this.start.y;\n        this.end.z =\n            this.manager.physics.direction.z * this.reachDistance + this.start.z;\n        let count = 0;\n        const voxels = VisitAll(this.start, this.end, () => {\n            count++;\n            if (count > 100)\n                return false;\n            return true;\n        });\n        let foundVoxel = false;\n        for (let i = 0; i < voxels.length; i += 3) {\n            const x = voxels[i];\n            const y = voxels[i + 1];\n            const z = voxels[i + 2];\n            if (!this.dataTool.loadInAt(x, y, z))\n                continue;\n            if (!this.hooks.onVoxelPickCheck.run(this.dataTool))\n                continue;\n            if (this.dataTool.isRenderable()) {\n                this.manager.physics.pick.position.x = x;\n                this.manager.physics.pick.position.y = y;\n                this.manager.physics.pick.position.z = z;\n                foundVoxel = true;\n                break;\n            }\n        }\n        if (!foundVoxel)\n            this.manager.physics.pick.position.set(-Infinity, 0, 0);\n    }\n}\n","export * from \"./WorldPlayer.js\";\nexport * from \"./InitWorldPlayer.js\";\n","export const SimulationLoop = {\r\n    speed: 0,\r\n    _delta: 0,\r\n    _previous: 0,\r\n    _performance: {},\r\n    _intervals: new Map(),\r\n    async $INIT(speed) {\r\n        this.speed = speed;\r\n        if (performance) {\r\n            this._performance = performance;\r\n        }\r\n        else {\r\n            //@ts-ignore\r\n            if (require) {\r\n                //@ts-ignore\r\n                this._performance = require(\"perf_hooks\").performance;\r\n            }\r\n            else {\r\n                //@ts-ignore\r\n                this._performance = (await import(\"perf_hooks\")).performance;\r\n            }\r\n        }\r\n        this._previous = this._performance.now();\r\n    },\r\n    _round(n) {\r\n        const d = Math.floor(n / 10) * 10;\r\n        if (d < 10)\r\n            return 10;\r\n        return d;\r\n    },\r\n    registerInterval(interval) {\r\n        this._intervals.set(this._round(interval), {\r\n            delta: 0,\r\n            functions: [],\r\n        });\r\n    },\r\n    addToInterval(interval, run) {\r\n        const inte = this._intervals.get(this._round(interval));\r\n        if (!inte)\r\n            return;\r\n        inte.functions.push(run);\r\n    },\r\n    run() {\r\n        const n = this._performance.now();\r\n        this._delta = n - this._previous;\r\n        this._previous = n;\r\n        const roundedDelta = this._round(this._delta);\r\n        for (const [inte, data] of this._intervals) {\r\n            if (inte < roundedDelta) {\r\n                data.functions.forEach((_) => _());\r\n                continue;\r\n            }\r\n            if (data.delta + roundedDelta >= inte) {\r\n                data.functions.forEach((_) => _(data.delta + roundedDelta));\r\n                data.delta = 0;\r\n                continue;\r\n            }\r\n            if (data.delta < inte) {\r\n                data.delta += roundedDelta;\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.run();\r\n        }, this.speed / 2);\r\n    },\r\n};\r\n","export * from \"./SimulationLoop.js\";\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"DSLIBS_divineBinaryObject_dist_index_js-DSLIBS_divineVoxelEngine_dist_Common_Threads_Contract-5324f4\",\"DSLIBS_divineVoxelEngine_dist_Math_index_js-DSLIBS_divineVoxelEngine_dist_Tools_Data_RichData-f07748\",\"DSLIBS_dvePlugIns_Player_dist_Data_PlayerManager_js-DSLIBS_dvePlugIns_Player_dist_Data_Regist-d31b5c\"], () => (__webpack_require__(\"./compiled/client/World/world.js\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && !queue.d) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = 1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && (queue.d = 0);\n};","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".DVE.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"compiled_client_World_world_js\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkdve_testing\"] = self[\"webpackChunkdve_testing\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([\"DSLIBS_divineBinaryObject_dist_index_js-DSLIBS_divineVoxelEngine_dist_Common_Threads_Contract-5324f4\",\"DSLIBS_divineVoxelEngine_dist_Math_index_js-DSLIBS_divineVoxelEngine_dist_Tools_Data_RichData-f07748\",\"DSLIBS_dvePlugIns_Player_dist_Data_PlayerManager_js-DSLIBS_dvePlugIns_Player_dist_Data_Regist-d31b5c\"].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":[],"sourceRoot":""}