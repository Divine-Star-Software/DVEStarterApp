{"version":3,"file":"DSLIBS_dvePlugIns_Player_dist_Data_PlayerManager_js-DSLIBS_dvePlugIns_Player_dist_Data_Regist-d31b5c.DVE.js","mappings":";;;;;;;;;;;;;AAAO;AACP;AACA,eAAe;AACf,aAAa;AACb,mBAAmB;AACnB;;;;;;;;;;;;;;;;;;;ACLsD;AAC/C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO,8BAA8B,gEAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,wBAAwB,gEAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;ACnM+D;AACxD,4BAA4B,yEAAgB;AAC5C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,eAAe,yEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1EgD;AACa;AACJ;AAClD;AACP,wCAAwC,0DAAU;AAClD;AACA,YAAY,6EAA0B;AACtC;AACA;AACA,KAAK;AACL;AACA,YAAY,+EAA4B;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,mFAAgC;AAC5C;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,kFAA+B;AAC3C;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,+EAA4B;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,gFAA6B;AACzC;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,oFAAiC;AAC7C;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,+EAA4B;AACxC;AACA;AACA,KAAK;AACL;AACA,YAAY,sFAAmC;AAC/C;AACA;AACA,KAAK;AACL;AACA,YAAY,+FAA4C;AACxD;AACA;AACA,KAAK;AACL;AACA,YAAY,qFAAkC;AAC9C;AACA,KAAK;AACL;AACA,YAAY,qFAAkC;AAC9C;AACA,KAAK;AACL;AACA,YAAY,sFAAmC;AAC/C;AACA,KAAK;AACL;AACA,YAAY,qFAAkC;AAC9C;AACA,KAAK;AACL,oCAAoC,2BAA2B;AAC/D,sCAAsC,0DAAU;AAChD;AACA,YAAY,yEAAwB;AACpC;AACA;AACA,KAAK;AACL;AACA,YAAY,wEAAuB;AACnC;AACA;AACA,KAAK;AACL;AACA,YAAY,sEAAqB;AACjC;AACA;AACA,KAAK;AACL;AACA,YAAY,8EAA6B;AACzC;AACA;AACA,KAAK;AACL;AACA,YAAY,0EAAyB;AACrC;AACA;AACA,KAAK;AACL;AACA,YAAY,gFAA+B;AAC3C;AACA;AACA,KAAK;AACL;AACA,YAAY,6EAA4B;AACxC;AACA;AACA,KAAK;AACL;AACA,YAAY,wEAAuB;AACnC;AACA;AACA,KAAK;AACL;AACA,YAAY,4EAA2B;AACvC;AACA;AACA,KAAK;AACL;AACA,YAAY,4EAA2B;AACvC;AACA;AACA,KAAK;AACL,kCAAkC,2BAA2B;AAC7D;AACA;AACA;AACA;AACA","sources":["webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/PlayerManager.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/PlayerPhysicsData.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/PlayerStatsData.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/RegisterPlayerData.js"],"sourcesContent":["export const PlayerManager = {\n    currentDimension: \"main\",\n    physics: {},\n    stats: {},\n    $INIt(data) { },\n};\n","import { RemoteTagManager } from \"divine-binary-tags\";\nexport const PlayerPhysicsStatesValues = {\n    still: 0,\n    secondaryStill: 1,\n    walkingForward: 2,\n    walkingBackward: 3,\n    walkingLeft: 4,\n    walkingRight: 5,\n};\nexport const PlayerPhysicsTagIDs = {\n    header: \"#header\",\n    position: \"#position\",\n    pickPosition: \"#pick-position\",\n    pickNormals: \"#pick-normals\",\n    direction: \"#direction\",\n    sideDirection: \"#side-direction\",\n    rotation: \"#rotation\",\n    eyeLevel: \"#eye-level\",\n    states: {\n        movement: \"#movement-state\",\n        secondaryMovement: \"#secondary-movement-state\",\n        jumping: \"#is-jumping\",\n        running: \"#is-running\",\n        onGround: \"#is-on-ground\",\n        inWater: \"#is-in-water\",\n    },\n};\nexport const PlayerPhysicsTags = new RemoteTagManager(\"player-physics-tags\");\nclass DBTVec3 {\n    tagId;\n    parent;\n    constructor(tagId, parent) {\n        this.tagId = tagId;\n        if (parent) {\n            this.parent = parent;\n        }\n    }\n    set(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    get x() {\n        return this.parent.tags.getArrayTagValue(this.tagId, 0);\n    }\n    set x(v) {\n        this.parent.tags.setArrayTagValue(this.tagId, 0, v);\n    }\n    get y() {\n        return this.parent.tags.getArrayTagValue(this.tagId, 1);\n    }\n    set y(v) {\n        this.parent.tags.setArrayTagValue(this.tagId, 1, v);\n    }\n    get z() {\n        return this.parent.tags.getArrayTagValue(this.tagId, 2);\n    }\n    set z(v) {\n        this.parent.tags.setArrayTagValue(this.tagId, 2, v);\n    }\n    getAsArray() {\n        return [this.x, this.y, this.z];\n    }\n}\nexport class PlayerPhysicsData {\n    tags;\n    constructor(buffer, initData) {\n        this.tags = new RemoteTagManager(\"player-physics-tags\");\n        this.tags.$INIT(initData);\n        this.tags.setBuffer(buffer);\n        this.pick._s = this;\n        this.states._s = this;\n        this.is._s = this;\n        this.nowIs._s = this;\n    }\n    position = new DBTVec3(PlayerPhysicsTagIDs.position, this);\n    pick = {\n        _s: {},\n        normal: new DBTVec3(PlayerPhysicsTagIDs.pickNormals, this),\n        position: new DBTVec3(PlayerPhysicsTagIDs.pickPosition, this),\n        getPlacePosition() {\n            return [\n                this.position.x + this.normal.x,\n                this.position.y + this.normal.y,\n                this.position.z + this.normal.z,\n            ];\n        },\n        getPlaceVec3() {\n            return {\n                x: this.position.x + this.normal.x,\n                y: this.position.y + this.normal.y,\n                z: this.position.z + this.normal.z,\n            };\n        },\n    };\n    direction = new DBTVec3(PlayerPhysicsTagIDs.direction, this);\n    sideDirection = new DBTVec3(PlayerPhysicsTagIDs.sideDirection, this);\n    rotation = new DBTVec3(PlayerPhysicsTagIDs.rotation, this);\n    states = {\n        _s: {},\n        get movement() {\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.movement);\n        },\n        set movement(v) {\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.movement, v);\n        },\n        get secondaryMovement() {\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.secondaryMovement);\n        },\n        set secondaryMovement(v) {\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.secondaryMovement, v);\n        },\n        get jumping() {\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.jumping);\n        },\n        set jumping(v) {\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.jumping, v);\n        },\n        get running() {\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.running);\n        },\n        set running(v) {\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.running, v);\n        },\n        get onGround() {\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.onGround) == 1;\n        },\n        set onGround(v) {\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.onGround, v ? 1 : 0);\n        },\n        get inWater() {\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.inWater) == 1;\n        },\n        set inWater(v) {\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.inWater, v ? 1 : 0);\n        },\n    };\n    get eyeLevel() {\n        return this.tags.getTag(PlayerPhysicsTagIDs.eyeLevel) / 10;\n    }\n    set eyeLevel(v) {\n        if (!Number.isInteger(v)) {\n            v = (v * 10) >> 0;\n        }\n        this.tags.setTag(PlayerPhysicsTagIDs.eyeLevel, v);\n    }\n    nowIs = {\n        _s: {},\n        still() {\n            this._s.states.movement = PlayerPhysicsStatesValues.still;\n            this._s.states.secondaryMovement =\n                PlayerPhysicsStatesValues.secondaryStill;\n        },\n        walkingForward(v = true) {\n            this._s.states.movement = v\n                ? PlayerPhysicsStatesValues.walkingForward\n                : PlayerPhysicsStatesValues.still;\n        },\n        walkingBackward(v = true) {\n            this._s.states.movement = v\n                ? PlayerPhysicsStatesValues.walkingBackward\n                : PlayerPhysicsStatesValues.still;\n        },\n        walkingLeft(v = true) {\n            this._s.states.secondaryMovement = v\n                ? PlayerPhysicsStatesValues.walkingLeft\n                : PlayerPhysicsStatesValues.secondaryStill;\n        },\n        walkingRight(v = true) {\n            this._s.states.secondaryMovement = v\n                ? PlayerPhysicsStatesValues.walkingRight\n                : PlayerPhysicsStatesValues.secondaryStill;\n        },\n        jumping(v = true) {\n            this._s.states.jumping = v ? 1 : 0;\n        },\n        running(v = true) {\n            this._s.states.running = v ? 1 : 0;\n        },\n    };\n    is = {\n        _s: {},\n        get walking() {\n            return this._s.states.movement || this._s.states.secondaryMovement > 1;\n        },\n        get running() {\n            return this._s.states.running;\n        },\n        get onGround() {\n            return this._s.states.onGround;\n        },\n        get inWater() {\n            return this._s.states.inWater;\n        },\n    };\n}\n","import { RemoteTagManager } from \"divine-binary-tags/index.js\";\nexport const PlayerStatsTags = new RemoteTagManager(\"player-stats-tags\");\nexport const PlayerStatsTagIDs = {\n    header: \"#header\",\n    level: \"#level\",\n    exp: \"#exp\",\n    maxMana: \"#max_mana\",\n    currentMana: \"#current_mana\",\n    maxEnegery: \"#max_energy\",\n    currentEnergy: \"#current_energy\",\n    speed: \"#speed\",\n    jumpPower: \"#jump_power\",\n    intuition: \"#intuition\",\n};\nexport class PlayerStatsData {\n    tags = new RemoteTagManager(\"player-stairs-data\");\n    constructor(sab, initData) {\n        this.tags.$INIT(initData);\n        this.tags.setBuffer(sab);\n    }\n    get level() {\n        return this.tags.getTag(PlayerStatsTagIDs.level);\n    }\n    set level(level) {\n        this.tags.setTag(PlayerStatsTagIDs.level, level);\n    }\n    get exp() {\n        return this.tags.getTag(PlayerStatsTagIDs.exp);\n    }\n    set exp(exp) {\n        this.tags.setTag(PlayerStatsTagIDs.exp, exp);\n    }\n    get maxMana() {\n        return this.tags.getTag(PlayerStatsTagIDs.maxMana);\n    }\n    set maxMana(maxMana) {\n        this.tags.setTag(PlayerStatsTagIDs.maxMana, maxMana);\n    }\n    get currentMana() {\n        return this.tags.getTag(PlayerStatsTagIDs.currentMana);\n    }\n    set currentMana(currentMana) {\n        this.tags.setTag(PlayerStatsTagIDs.currentMana, currentMana);\n    }\n    get maxEnegery() {\n        return this.tags.getTag(PlayerStatsTagIDs.maxEnegery);\n    }\n    set maxEnegery(maxEnegery) {\n        this.tags.setTag(PlayerStatsTagIDs.maxEnegery, maxEnegery);\n    }\n    get currentEnergy() {\n        return this.tags.getTag(PlayerStatsTagIDs.currentEnergy);\n    }\n    set currentEnergy(currentEnergy) {\n        this.tags.setTag(PlayerStatsTagIDs.currentEnergy, currentEnergy);\n    }\n    get speed() {\n        return this.tags.getTag(PlayerStatsTagIDs.speed);\n    }\n    set speed(speed) {\n        this.tags.setTag(PlayerStatsTagIDs.speed, speed);\n    }\n    get jumpPower() {\n        return this.tags.getTag(PlayerStatsTagIDs.jumpPower);\n    }\n    set jumpPower(jumpPower) {\n        this.tags.setTag(PlayerStatsTagIDs.jumpPower, jumpPower);\n    }\n    get intuition() {\n        return this.tags.getTag(PlayerStatsTagIDs.intuition);\n    }\n    set intuition(intuition) {\n        this.tags.setTag(PlayerStatsTagIDs.intuition, intuition);\n    }\n}\n","import { TagManager } from \"divine-binary-tags\";\nimport { PlayerPhysicsTagIDs } from \"./PlayerPhysicsData.js\";\nimport { PlayerStatsTagIDs } from \"./PlayerStatsData.js\";\nexport function $RegisterPlayerData() {\n    const playerPhysicsTagManager = new TagManager(\"player-physics-tags\");\n    playerPhysicsTagManager.registerTag({\n        id: PlayerPhysicsTagIDs.header,\n        type: \"header\",\n        numberType: \"16ui\",\n    });\n    playerPhysicsTagManager.registerTag({\n        id: PlayerPhysicsTagIDs.position,\n        type: \"typed-number-array\",\n        numberType: \"64f\",\n        length: 3,\n    });\n    playerPhysicsTagManager.registerTag({\n        id: PlayerPhysicsTagIDs.pickPosition,\n        type: \"typed-number-array\",\n        numberType: \"64f\",\n        length: 3,\n    });\n    playerPhysicsTagManager.registerTag({\n        id: PlayerPhysicsTagIDs.pickNormals,\n        type: \"typed-number-array\",\n        numberType: \"8i\",\n        length: 3,\n    });\n    playerPhysicsTagManager.registerTag({\n        id: PlayerPhysicsTagIDs.rotation,\n        type: \"typed-number-array\",\n        numberType: \"32f\",\n        length: 3,\n    });\n    playerPhysicsTagManager.registerTag({\n        id: PlayerPhysicsTagIDs.direction,\n        type: \"typed-number-array\",\n        numberType: \"32f\",\n        length: 3,\n    });\n    playerPhysicsTagManager.registerTag({\n        id: PlayerPhysicsTagIDs.sideDirection,\n        type: \"typed-number-array\",\n        numberType: \"32f\",\n        length: 3,\n    });\n    playerPhysicsTagManager.registerTag({\n        id: PlayerPhysicsTagIDs.eyeLevel,\n        type: \"typed-number\",\n        numberType: \"8ui\",\n    });\n    playerPhysicsTagManager.registerTag({\n        id: PlayerPhysicsTagIDs.states.movement,\n        type: \"typed-number\",\n        numberType: \"8ui\",\n    });\n    playerPhysicsTagManager.registerTag({\n        id: PlayerPhysicsTagIDs.states.secondaryMovement,\n        type: \"typed-number\",\n        numberType: \"8ui\",\n    });\n    playerPhysicsTagManager.registerTag({\n        id: PlayerPhysicsTagIDs.states.jumping,\n        type: \"boolean\",\n    });\n    playerPhysicsTagManager.registerTag({\n        id: PlayerPhysicsTagIDs.states.running,\n        type: \"boolean\",\n    });\n    playerPhysicsTagManager.registerTag({\n        id: PlayerPhysicsTagIDs.states.onGround,\n        type: \"boolean\",\n    });\n    playerPhysicsTagManager.registerTag({\n        id: PlayerPhysicsTagIDs.states.inWater,\n        type: \"boolean\",\n    });\n    playerPhysicsTagManager.$INIT({ indexBufferMode: \"shared\" });\n    const playerStatesTagManger = new TagManager(\"player-states-tags\");\n    playerStatesTagManger.registerTag({\n        id: PlayerStatsTagIDs.header,\n        type: \"header\",\n        numberType: \"16ui\",\n    });\n    playerStatesTagManger.registerTag({\n        id: PlayerStatsTagIDs.level,\n        type: \"typed-number\",\n        numberType: \"16ui\",\n    });\n    playerStatesTagManger.registerTag({\n        id: PlayerStatsTagIDs.exp,\n        type: \"typed-number\",\n        numberType: \"16ui\",\n    });\n    playerStatesTagManger.registerTag({\n        id: PlayerStatsTagIDs.currentMana,\n        type: \"typed-number\",\n        numberType: \"16ui\",\n    });\n    playerStatesTagManger.registerTag({\n        id: PlayerStatsTagIDs.maxMana,\n        type: \"typed-number\",\n        numberType: \"16ui\",\n    });\n    playerStatesTagManger.registerTag({\n        id: PlayerStatsTagIDs.currentEnergy,\n        type: \"typed-number\",\n        numberType: \"16ui\",\n    });\n    playerStatesTagManger.registerTag({\n        id: PlayerStatsTagIDs.maxEnegery,\n        type: \"typed-number\",\n        numberType: \"16ui\",\n    });\n    playerStatesTagManger.registerTag({\n        id: PlayerStatsTagIDs.speed,\n        type: \"typed-number\",\n        numberType: \"16ui\",\n    });\n    playerStatesTagManger.registerTag({\n        id: PlayerStatsTagIDs.jumpPower,\n        type: \"typed-number\",\n        numberType: \"16ui\",\n    });\n    playerStatesTagManger.registerTag({\n        id: PlayerStatsTagIDs.intuition,\n        type: \"typed-number\",\n        numberType: \"16ui\",\n    });\n    playerStatesTagManger.$INIT({ indexBufferMode: \"shared\" });\n    return {\n        playerPhysicsTagManager,\n        playerStatesTagManger,\n    };\n}\n"],"names":[],"sourceRoot":""}